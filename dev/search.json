[{"path":[]},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pins.rstudio.com/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pins.rstudio.com/dev/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pins.rstudio.com/dev/articles/customize-pins-metadata.html","id":"a-function-to-store-factors","dir":"Articles","previous_headings":"","what":"A function to store factors","title":"Create consistent metadata for pins","text":"Say want store factor JSON together levels factor metadata. can write function wrapping pin_write() creates standardized metadata interested writes consistent way. can use new function write pin JSON specific metadata:","code":"pin_write_factor_json <- function(board,                                    x,                                    name,                                    title = NULL,                                    description = NULL,                                    metadata = list(),                                    versioned = NULL,                                    tags = NULL,                                    ...) {   if (!is.factor(x)) rlang::abort(\"`x` is not a factor\")   factor_levels <- levels(x)   metadata <- modifyList(metadata, list(factor_levels = factor_levels))   pin_write(     board = board,      x = x,      name = name,      type = \"json\",      title = title,      description = description,      metadata = metadata,     ...   ) } ten_letters <- factor(sample(letters, size = 10), levels = letters) board %>% pin_write_factor_json(ten_letters, \"letters-as-json\") #> Creating new version '20241007T174950Z-099e2' #> Writing to pin 'letters-as-json'"},{"path":"https://pins.rstudio.com/dev/articles/customize-pins-metadata.html","id":"a-function-to-read-factors","dir":"Articles","previous_headings":"A function to store factors","what":"A function to read factors","title":"Create consistent metadata for pins","text":"’s possible read pin using regular pin_read() function, object get longer factor! Instead, can also write special function reading, reconstruct factor including levels:","code":"board %>% pin_read(\"letters-as-json\") #>  [1] \"m\" \"w\" \"l\" \"e\" \"f\" \"o\" \"u\" \"d\" \"v\" \"i\" pin_read_factor_json <- function(board, name, version = NULL, hash = NULL, ...) {   ret <- pin_read(board = board, name = name, version = version, hash = hash, ...)   meta <- pin_meta(board = board, name = name, version = version, ...)   factor(ret, levels = meta$user$factor_levels) }  board %>% pin_read_factor_json(\"letters-as-json\") #>  [1] m w l e f o u d v i #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z"},{"path":"https://pins.rstudio.com/dev/articles/customize-pins-metadata.html","id":"examples-of-using-consistent-metadata","dir":"Articles","previous_headings":"A function to store factors","what":"Examples of using consistent metadata","title":"Create consistent metadata for pins","text":"approaches used real projects? vetiver package wraps pins functions write read model binaries together metadata, including renv lockfile. can record version control information Git commit SHA pin metadata. can create data lineage data governance metadata appropriate use case.","code":""},{"path":"https://pins.rstudio.com/dev/articles/managing-custom-formats.html","id":"upload-a-single-file","dir":"Articles","previous_headings":"","what":"Upload a single file","title":"Managing custom formats","text":"Two points keep mind: pin_upload() takes vector paths local files. pin_download() returns vector paths local files. writing one-file, can everything directly: Reading downloaded pin straightforward; pin_download() returns local path can piped arrow::read_feather():","code":"pin_name <- \"mtcars-arrow\"  # file name will be `mtcars-arrow.arrow` path <- fs::path_temp(fs::path_ext_set(pin_name, \"arrow\"))  arrow::write_feather(mtcars, path, compression = \"uncompressed\")  pin_upload(board, paths = path, name = pin_name) #> Creating new version '20241007T174953Z-43a1a' mtcars_download <-    pin_download(board, pin_name) %>%   arrow::read_feather()  head(mtcars_download) #> # A tibble: 6 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2 #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1"},{"path":"https://pins.rstudio.com/dev/articles/managing-custom-formats.html","id":"function-to-manage-uploading","dir":"Articles","previous_headings":"","what":"Function to manage uploading","title":"Managing custom formats","text":"want write one custom file certain type, using certain tool, might consider writing helper function: helper function designed work like pin_write(): , can pipe result pin_download() reader function:","code":"pin_upload_arrow <- function(board, x, name, ...) {   # path deleted when `pin_upload_arrow()` exits   path <- fs::path_temp(fs::path_ext_set(name, \"arrow\"))   withr::defer(fs::file_delete(path))      # custom writer   arrow::write_feather(x, path, compression = \"uncompressed\")      pin_upload(board, paths = path, name = name, ...)  } pin_upload_arrow(board, x = mtcars, name = \"mtcars-arrow2\") #> Creating new version '20241007T174953Z-43a1a' pin_download(board, name = \"mtcars-arrow2\") %>%   arrow::read_feather() %>%   head() #> # A tibble: 6 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2 #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1"},{"path":"https://pins.rstudio.com/dev/articles/managing-custom-formats.html","id":"another-example-upload-a-zipped-directory-archive-as-a-pin","dir":"Articles","previous_headings":"","what":"Another example: upload a zipped directory archive as a pin","title":"Managing custom formats","text":"want use approach archive pin whole directory, can write helper function like: can download compressed archive via pin_download(board, name) pipe path straight archive::archive_extract() extract archive new directory.","code":"pin_upload_archive <- function(board, dir, name, ...) {   path <- fs::path_temp(fs::path_ext_set(name, \"tar.gz\"))   withr::defer(fs::file_delete(path))   archive::archive_write_dir(path, dir)   pin_upload(board = board, paths = path, name = name, ...) }"},{"path":"https://pins.rstudio.com/dev/articles/pins-update.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Upgrading to pins 1.0.0","text":"simple example legacy API looks something like : convert modern API need make two major changes: Instead registering named board, create explicit board object. use pin_read() pin_write() instead pin_get() pin(). Since board object always first argument, might also want use pipe:","code":"# Legacy API board_register_local(\"vignette\", tempfile()) #> Warning: `board_register_local()` was deprecated in pins 1.4.0. #> ℹ Learn more at <https://pins.rstudio.com/articles/pins-update.html> #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  pin(head(mtcars), \"mtcars\", board = \"vignette\") #> Warning: `pin()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_write()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. pin_get(\"mtcars\", board = \"vignette\") #> Warning: `pin_get()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_read()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 # Modern API board <- board_local()  pin_write(board, head(mtcars), \"mtcars\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174956Z-f79b9' #> Writing to pin 'mtcars' pin_read(board, \"mtcars\") #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 # Modern API board <- board_local()  board %>% pin_write(head(mtcars), \"mtcars\") #> Guessing `type = 'rds'` #> ! The hash of pin \"mtcars\" has not changed. #> • Your pin will not be stored. board %>% pin_read(\"mtcars\") #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://pins.rstudio.com/dev/articles/pins-update.html","id":"pinning-files","dir":"Articles","previous_headings":"Examples","what":"Pinning files","title":"Upgrading to pins 1.0.0","text":"Another way use pin() path file: pins 1.0.0 clearly separates two cases pin object pinning file, instead pin_write() pin_read() need pin_upload() pin_download():","code":"# Legacy API path <- tempfile() writeLines(letters, path)  pin(path, \"alphabet\", board = \"vignette\") pin_get(\"alphabet\", board = \"vignette\") #> [1] \"/tmp/RtmpEk11XX/file1e245827079f/alphabet/file1e242cc4fd91\" # Modern API board %>% pin_upload(path, \"alphabet\") #> Creating new version '20241007T174958Z-ee580' board %>% pin_download(\"alphabet\") #> [1] \"~/.local/share/pins/alphabet/20241007T174958Z-ee580/file1e242cc4fd91\""},{"path":"https://pins.rstudio.com/dev/articles/pins-update.html","id":"pinning-a-url","dir":"Articles","previous_headings":"Examples","what":"Pinning a url","title":"Upgrading to pins 1.0.0","text":"Finally, can pin() url automatically re-download changes: now needs made explicit new board_url(), since returns path, file, need use pin_download():","code":"# Legacy API base <- \"https://raw.githubusercontent.com/rstudio/pins-r/main/tests/testthat/\"  (pin(paste0(base, \"pin-files/first.txt\"), board = \"vignette\")) #> [1] \"/tmp/RtmpEk11XX/file1e245827079f/first/first.txt\" # Modern API board_github <- board_url(c(   raw = paste0(base, \"pin-files/first.txt\") )) board_github %>% pin_download(\"raw\") #> [1] \"~/.cache/pins/url/4bb0af0abae87c78f4a1b6fbe7e2642c/first.txt\""},{"path":"https://pins.rstudio.com/dev/articles/pins-update.html","id":"implicit-board","dir":"Articles","previous_headings":"Examples","what":"Implicit board","title":"Upgrading to pins 1.0.0","text":"’s also possible use pin() pin_get() without explicit board argument, case automatically uses local board: convert code, need create explicit board_local():","code":"# Legacy API pin(data.frame(x = 1:3), \"test-data\") pin_get(\"test-data\") #>   x #> 1 1 #> 2 2 #> 3 3 # Modern API board <- board_local()  board %>% pin_write(data.frame(x = 1:3), \"test-data\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174958Z-1422a' #> Writing to pin 'test-data' board %>% pin_read(\"test-data\") #>   x #> 1 1 #> 2 2 #> 3 3"},{"path":[]},{"path":"https://pins.rstudio.com/dev/articles/pins-update.html","id":"board-functions","dir":"Articles","previous_headings":"Equivalents","what":"Board functions","title":"Upgrading to pins 1.0.0","text":"Future releases add support additional boards based user feedback.","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Get started with pins","text":"Every pin lives pin board, must start creating pin board. vignette ’ll use temporary board automatically deleted R session : real-life, ’d pick board depending want share data. options:","code":"board <- board_temp() board <- board_local() # share data across R sessions on the same computer board <- board_folder(\"~/Dropbox\") # share data with others using dropbox board <- board_folder(\"Z:\\\\my-team\\pins\") # share data using a shared network drive board <- board_connect() # share data with Posit Connect"},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"reading-and-writing-data","dir":"Articles","previous_headings":"","what":"Reading and writing data","title":"Get started with pins","text":"pin board, can write data pin_write(): first argument object save (usually data frame, can R object), second argument gives “name” pin. name basically equivalent file name: ’ll use later want read data pin. rule pin name can’t contain slashes. ’ve pinned object, can read back pin_read(): don’t need supply file type reading data pin pins automatically stores file type metadata.","code":"mtcars <- tibble::as_tibble(mtcars) board %>% pin_write(mtcars, \"mtcars\") #> Guessing `type = 'rds'` #> Creating new version '20241007T175000Z-f892e' #> Writing to pin 'mtcars' board %>% pin_read(\"mtcars\") #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"how-and-what-to-store-as-a-pin","dir":"Articles","previous_headings":"","what":"How and what to store as a pin","title":"Get started with pins","text":"can see output previous section, pins chosen save example data .rds file. can choose another option depending goals: type = \"rds\" uses writeRDS() create binary R data file. can save R object (including trained models) ’s readable R, languages. type = \"csv\" uses write.csv() create CSV file. CSVs plain text can read easily many applications, support simple columns (e.g. numbers, strings), can take lot disk space, can slow read. type = \"parquet\" uses nanoparquet::write_parquet() create Parquet file. Parquet modern, language-independent, column-oriented file format efficient data storage retrieval. Parquet excellent choice storing tabular data requires nanoparquet package. type = \"arrow\" uses arrow::write_feather() create Arrow/Feather file. type = \"json\" uses jsonlite::write_json() create JSON file. Pretty much every programming language can read json files, work well nested lists. type = \"qs\" uses qs::qsave() create binary R data file, like writeRDS(). format achieves faster read/write speeds RDS, compresses data efficiently, making good choice larger objects. Read qs package. Note data lives elsewhere, pins takes care downloading caching ’s re-downloaded needed. said, boards transmit pins HTTP, going slow possibly unreliable large pins. general rule thumb, don’t recommend using pins files 500 MB. find routinely pinning data larger , might need reconsider data engineering pipeline. Storing data/object pin works well write single source process. appropriate multiple sources processes need write pin; since pins package reads writes files, manage concurrent writes. Good use pins: ETL pipeline stores model summarized dataset day Bad use pins: Shiny app collects data users, may using app time","code":""},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Get started with pins","text":"Every pin accompanied metadata can access pin_meta(): shows metadata ’s generated default. includes: title, brief textual description dataset. optional description, can provide details. date-time pin created. file_size, bytes, underlying files. unique pin_hash can supply pin_read() ensure ’re reading exactly data expect. creating pin, can override default description provide additional metadata stored data: ’ll best keep automatically generated metadata consistent time, ’d recommend manually capturing anything really care metadata.","code":"board %>% pin_meta(\"mtcars\") #> List of 13 #>  $ file       : chr \"mtcars.rds\" #>  $ file_size  : 'fs_bytes' int 900 #>  $ pin_hash   : chr \"f892ef10e1a5c779\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"mtcars: a pinned 32 x 11 data frame\" #>  $ description: NULL #>  $ tags       : NULL #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:50:00\" #>  $ api_version: int 1 #>  $ user       : list() #>  $ name       : chr \"mtcars\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/RtmpyheE1G/pins-1e6b2b898ce4/mtcars/20241007T175000Z-f892e\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T175000Z-f892e\" board %>% pin_write(mtcars,    description = \"Data extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\",   metadata = list(     source = \"Henderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.\"   ) ) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> ! The hash of pin \"mtcars\" has not changed. #> • Your pin will not be stored. board %>% pin_meta(\"mtcars\") #> List of 13 #>  $ file       : chr \"mtcars.rds\" #>  $ file_size  : 'fs_bytes' int 900 #>  $ pin_hash   : chr \"f892ef10e1a5c779\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"mtcars: a pinned 32 x 11 data frame\" #>  $ description: NULL #>  $ tags       : NULL #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:50:00\" #>  $ api_version: int 1 #>  $ user       : list() #>  $ name       : chr \"mtcars\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/RtmpyheE1G/pins-1e6b2b898ce4/mtcars/20241007T175000Z-f892e\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T175000Z-f892e\""},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"versioning","dir":"Articles","previous_headings":"","what":"Versioning","title":"Get started with pins","text":"many situations ’s useful version pins, writing existing pin replace existing data, instead adds new copy. two ways turn versioning : create board can turn versioning every pin board: write pin, can specifically request versioning turned pin: boards versioning default. primary exception board_folder() since stores data computer, ’s automated way clean data ’re saving. turned versioning , every pin_write() create new version: can list available versions pin_versions(): can delete specific older version pin_version_delete() sets older versions pin_versions_prune(). default, pin_read() return recent version: can request older version supplying version argument:","code":"board2 <- board_temp(versioned = TRUE) board2 <- board_temp() board2 %>% pin_write(mtcars, versioned = TRUE) board2 <- board_temp(versioned = TRUE)  board2 %>% pin_write(1:5, name = \"x\", type = \"rds\") #> Creating new version '20241007T175002Z-87646' #> Writing to pin 'x' board2 %>% pin_write(2:6, name = \"x\", type = \"rds\") #> Creating new version '20241007T175002Z-9c6ec' #> Writing to pin 'x' board2 %>% pin_write(3:7, name = \"x\", type = \"rds\") #> Creating new version '20241007T175002Z-99ce7' #> Writing to pin 'x' board2 %>% pin_versions(\"x\") #> # A tibble: 3 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20241007T175002Z-87646 2024-10-07 17:50:02 87646 #> 2 20241007T175002Z-99ce7 2024-10-07 17:50:02 99ce7 #> 3 20241007T175002Z-9c6ec 2024-10-07 17:50:02 9c6ec board2 %>% pin_read(\"x\") #> [1] 2 3 4 5 6 board2 %>% pin_read(\"x\", version = \"20210520T173110Z-49519\")"},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"reading-and-writing-files","dir":"Articles","previous_headings":"","what":"Reading and writing files","title":"Get started with pins","text":"far ’ve focussed pin_write() pin_read() work R objects. pins also provides lower-level pin_upload() pin_download() work files disk. can use share types data otherwise unsupported pins. pin_upload() works like pin_write() instead R object give vector paths. ’ll start creating files temp directory: Now can upload board: pin_download() returns vector paths: ’s now job handle . treat paths internal implementation details — never modify never save use outside pins. Note can’t pin_read() something pinned pin_upload(): can pin_download() something ’ve pinned pin_write():","code":"paths <- file.path(tempdir(), c(\"mtcars.csv\", \"alphabet.txt\")) write.csv(mtcars, paths[[1]]) writeLines(letters, paths[[2]]) board %>% pin_upload(paths, \"example\") #> Creating new version '20241007T175003Z-e9d42' board %>% pin_download(\"example\") #> [1] \"/tmp/RtmpyheE1G/pins-1e6b2b898ce4/example/20241007T175003Z-e9d42/mtcars.csv\"   #> [2] \"/tmp/RtmpyheE1G/pins-1e6b2b898ce4/example/20241007T175003Z-e9d42/alphabet.txt\" board %>% pin_read(\"example\") #> Error in `object_read()`: #> ! Cannot automatically read pin: #> • Is your pin specified as a full path? Retrieve it with `pin_download()` #> • Is your pin specified via a URL that is not a full path, such as a #>   Posit Connect vanity URL? Remember to include a trailing slash `/` board %>% pin_download(\"mtcars\") #> [1] \"/tmp/RtmpyheE1G/pins-1e6b2b898ce4/mtcars/20241007T175000Z-f892e/mtcars.rds\""},{"path":"https://pins.rstudio.com/dev/articles/pins.html","id":"caching","dir":"Articles","previous_headings":"","what":"Caching","title":"Get started with pins","text":"primary purpose pins make easy share data. pins also designed help spend little time possible downloading data. pin_read() pin_download() automatically cache remote pins: maintain local copy data (’s fast) always check ’s --date (analysis doesn’t use stale data). Wouldn’t nice take advantage feature dataset internet? ’s idea behind board_url() — can assemble board datasets, wherever live internet. example, code creates board containing single pin, penguins, refers fun data found GitHub: can read data combining pin_download() read.csv()1: board_url() requires bit work compared using download.file() similar big payoff: data re-downloaded changes.","code":"my_data <- board_url(c(   \"penguins\" = \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins_raw.csv\" )) my_data %>%   pin_download(\"penguins\") %>%    read.csv(check.names = FALSE) %>%    tibble::as_tibble() #> # A tibble: 344 × 17 #>    studyName `Sample Number` Species   Region Island Stage `Individual ID` #>    <chr>               <int> <chr>     <chr>  <chr>  <chr> <chr>           #>  1 PAL0708                 1 Adelie P… Anvers Torge… Adul… N1A1            #>  2 PAL0708                 2 Adelie P… Anvers Torge… Adul… N1A2            #>  3 PAL0708                 3 Adelie P… Anvers Torge… Adul… N2A1            #>  4 PAL0708                 4 Adelie P… Anvers Torge… Adul… N2A2            #>  5 PAL0708                 5 Adelie P… Anvers Torge… Adul… N3A1            #>  6 PAL0708                 6 Adelie P… Anvers Torge… Adul… N3A2            #>  7 PAL0708                 7 Adelie P… Anvers Torge… Adul… N4A1            #>  8 PAL0708                 8 Adelie P… Anvers Torge… Adul… N4A2            #>  9 PAL0708                 9 Adelie P… Anvers Torge… Adul… N5A1            #> 10 PAL0708                10 Adelie P… Anvers Torge… Adul… N5A2            #> # ℹ 334 more rows #> # ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <chr>, #> #   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>, #> #   `Flipper Length (mm)` <int>, `Body Mass (g)` <int>, Sex <chr>, #> #   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>"},{"path":"https://pins.rstudio.com/dev/articles/posit-connect.html","id":"sharing-tidied-data","dir":"Articles","previous_headings":"","what":"Sharing tidied data","title":"Posit Connect","text":"Imagine ’re interested ’s going news, ’ve written little code scrape BBC world news feed turn tidy dataset: Wouldn’t nice spare colleagues work reproducing data, provide directly tidy tibble? ’s easy pins: open pin RSC (e.g. running board %>% pin_browse(\"news_total\")), ’ll see metadata pin, preview data, control panel allows control can see data. Assuming ’ve given colleagues access, can now easily pull data analysis:","code":"library(xml2)  if (interactive()) {   xml <- read_xml(\"http://feeds.bbci.co.uk/news/rss.xml\")   } else {   # Read a saved version of the data to keep this vignette reproducible   xml <- read_xml(\"bbc-news.xml\")   }  items <- xml %>% xml_find_all(\"//item\")  bbc_news <- tibble::tibble(   title = items %>% xml_find_first(\"./title\") %>% xml_text(),   date = items %>% xml_find_first(\"./pubDate\") %>% xml_text(),   url = items %>% xml_find_first(\"./guid\") %>% xml_text() ) bbc_news #> # A tibble: 71 × 3 #>    title                                                       date  url   #>    <chr>                                                       <chr> <chr> #>  1 Diana interview: PM concerned after inquiry into BBC deceit Fri,… http… #>  2 Covid in Scotland: Glasgow to be only Scottish area in lev… Fri,… http… #>  3 Prince Harry says heavy drinking masked pain of mum Diana'… Fri,… http… #>  4 Coronavirus: Spain to lift restrictions for UK and Japanes… Fri,… http… #>  5 Diana interview: Whistleblower wants apology from BBC boss… Fri,… http… #>  6 Mayhill: Swansea rioters face robust action, police vow     Fri,… http… #>  7 UK to offer Australia tariff-free trade deal despite farme… Fri,… http… #>  8 Leonard Blavatnik named UK's richest person with £23bn for… Fri,… http… #>  9 Lady Gaga had a 'psychotic break' after sexual assault lef… Fri,… http… #> 10 Big cats seized from park belonging to Tiger King couple    Fri,… http… #> # ℹ 61 more rows board <- board_connect() board %>% pin_write(bbc_news) board <- board_connect() board %>% pin_read(\"your_name/bbc_news\")"},{"path":"https://pins.rstudio.com/dev/articles/posit-connect.html","id":"automating","dir":"Articles","previous_headings":"","what":"Automating","title":"Posit Connect","text":"underlying data changing regularly, pinned data change run pin_write(). Wouldn’t great automate process? One way RSC’s scheduled reports. First, take code put Rmd: publish Posit Connect, schedule run often like. Assuming Posit Connect 1.9.0 later don’t need provide arguments board_connect(); pins automatically publish Connect instance ’s running report.","code":"--- title: BBC news ---  ```{r} library(pins) library(xml2)  xml <- read_xml(\"http://feeds.bbci.co.uk/news/rss.xml\") items <- xml %>% xml_find_all(\"//item\")  bbc_news <- tibble::tibble(   title = items %>% xml_find_first(\"./title\") %>% xml_text(),   date = items %>% xml_find_first(\"./pubDate\") %>% xml_text(),   url = items %>% xml_find_first(\"./guid\") %>% xml_text() )  board <- board_connect() board %>% pin_write(bbc_news) ```  ```{r} bbc_news ```"},{"path":"https://pins.rstudio.com/dev/articles/posit-connect.html","id":"shiny-apps","dir":"Articles","previous_headings":"","what":"Shiny apps","title":"Posit Connect","text":"’re using automatically updated data Shiny app, can use pin_reactive_read() create reactive dependency app automatically update shortly data changes: deploy app watch scheduled reported runs, ’ll see data update automatically.","code":"library(shiny) library(pins)  board <- board_connect()  ui <- fluidPage(   titlePanel(\"News from the BBC\"),   htmlOutput(\"news\") )  server <- function(input, output, session) {   news <- board %>% pin_reactive_read(\"hadley/bbc_news\")      output$news <- renderUI({     title <- htmltools::htmlEscape(news()$title)     links <- paste0(\"<a href='\", news()$url, \"'>\", title, \"<\/a>\")     bullets <- paste0(\"  <li>\", links, \"<\/li>\", collapse = \"\\n\")     HTML(paste0(\"<ul>\", bullets, \"<\/ul>\"))   }) }  shinyApp(ui, server)"},{"path":"https://pins.rstudio.com/dev/articles/using-board-url.html","id":"publishing","dir":"Articles","previous_headings":"","what":"Publishing","title":"Using web-hosted boards","text":"steps publishing board can read consumers using board_url() : create board, write pins board, write manifest file using write_board_manifest(), publish website. first last steps specific deploy board web; discuss options Publishing platforms section. Regardless platform, ’ll write pins manifest way. first demonstration, ’ll start creating board, finish showing board works served. ’re using temporary board demonstration, practice, might use board_folder() project folder GitHub repo, perhaps board_s3(). Let’s make mtcars dataset available JSON file: Let’s make new version data adding column: lper100km, consumption liters per 100 km. make data friendlier folks outside United States. Let’s check board ensure one pin named \"mtcars\", two versions: board_url() consumed web, doesn’t access file system way, example, board_folder() ; can work around creating manifest file. board_url() set consumer reading, pins package uses file discover pins versions. manifest file key board_url()’s ability discover pins file-system-based board. writing pins publishing, call write_board_manifest(): maintenance manifest file automated; responsibility board publisher keep manifest date. Let’s confirm file called _pins.yaml: can inspect contents see pin board, version pin: point, publish folder containing board part web site. Let’s pretend served folder fake website, https://.real.website.co/pins/.","code":"library(pins) board <- board_temp(versioned = TRUE) board %>% pin_write(mtcars, type = \"json\") #> Using `name = 'mtcars'` #> Creating new version '20241007T175012Z-c2702' #> Writing to pin 'mtcars' mtcars_metric <- mtcars mtcars_metric$lper100km <- 235.215 / mtcars$mpg  board %>% pin_write(mtcars_metric, name = \"mtcars\", type = \"json\") #> Creating new version '20241007T175014Z-8416c' #> Writing to pin 'mtcars' board %>% pin_list() #> [1] \"mtcars\"  board %>% pin_versions(\"mtcars\") #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20241007T175012Z-c2702 2024-10-07 17:50:12 c2702 #> 2 20241007T175014Z-8416c 2024-10-07 17:50:14 8416c board %>% write_board_manifest() #> Manifest file written to root folder of board, as `_pins.yaml` withr::with_dir(board$path, fs::dir_ls()) #> _pins.yaml mtcars mtcars: - mtcars/20241007T175012Z-c2702/ - mtcars/20241007T175014Z-8416c/"},{"path":"https://pins.rstudio.com/dev/articles/using-board-url.html","id":"consuming","dir":"Articles","previous_headings":"","what":"Consuming","title":"Using web-hosted boards","text":"--date manifest file, board_url() can behave read-version board_folder(). Let’s create board_url() using fake URL: board_url() function reads manifest file discover pins versions: can read -recent version \"mtcars\" pin: can also read first version:","code":"web_board <- board_url(\"https://not.real.website.co/pins/\") web_board %>% pin_list() #> [1] \"mtcars\"  versions <- web_board %>% pin_versions(\"mtcars\") versions #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20241007T175012Z-c2702 2024-10-07 17:50:12 c2702 #> 2 20241007T175014Z-8416c 2024-10-07 17:50:14 8416c web_board %>% pin_read(\"mtcars\") %>% head() #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 #>                   lper100km #> Mazda RX4           11.2007 #> Mazda RX4 Wag       11.2007 #> Datsun 710          10.3164 #> Hornet 4 Drive      10.9914 #> Hornet Sportabout   12.5783 #> Valiant             12.9953 web_board %>% pin_read(\"mtcars\", version = versions$version[[1]]) %>% head() #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"},{"path":"https://pins.rstudio.com/dev/articles/using-board-url.html","id":"publishing-platforms","dir":"Articles","previous_headings":"","what":"Publishing platforms","title":"Using web-hosted boards","text":"goal section illustrate ways publish board part website.","code":""},{"path":"https://pins.rstudio.com/dev/articles/using-board-url.html","id":"pkgdown","dir":"Articles","previous_headings":"Publishing platforms","what":"pkgdown","title":"Using web-hosted boards","text":"Pins offers another way package developers share data associated R package. Publishing package dataset pin can extend data’s “audience” installed package. Using pkgdown, files save directory pkgdown/assets/ copied website’s root directory pkgdown::build_site() run. R Packages book suggests using folder called data-raw working datasets; can adapted use pins. start usethis::use_data_raw(). file /data-raw directory, wrangle clean datasets way going use usethis::use_data(). offer datasets web-based board instead built-package dataset, /data-raw file : Create board: board_folder(::(\"pkgdown/assets/pins-board\")) (might use different name \"pins-board\"). Write datasets board using pin_write(). end, call write_board_manifest(). Now build pkgdown site serve (perhaps via GitHub Pages URL like https://user-name.github.io/repo-name/), datasets available pins. R Packages book offers observation CRAN package data: Generally, package data smaller megabyte - ’s larger ’ll need argue exemption. Publishing board pkgdown site provides way offer datasets large CRAN extended versions data. consumer can read pins setting board like:","code":"board <- board_url(\"https://user-name.github.io/repo-name/pins-board/\")"},{"path":"https://pins.rstudio.com/dev/articles/using-board-url.html","id":"s3","dir":"Articles","previous_headings":"Publishing platforms","what":"S3","title":"Using web-hosted boards","text":"S3 buckets can made available different users using permissions; buckets can even made publicly accessible. Publishing data pin S3 bucket can allow collaborators read without dealing authentication required board_s3(). offer datasets pin S3 via board_url() : Create board: board_s3(\"-existing-bucket\") (set bucket’s permissions give appropriate people access). Write datasets board using pin_write(). end, call write_board_manifest(). S3 buckets typically URL like https://-existing-bucket.s3.us-west-2.amazonaws.com/. person access bucket, can read pins setting board like:","code":"board <- board_url(\"https://your-existing-bucket.s3.us-west-2.amazonaws.com/\")"},{"path":"https://pins.rstudio.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Silge. Maintainer, author. Hadley Wickham. Author. Javier Luraschi. Author. . Copyright holder, funder.","code":""},{"path":"https://pins.rstudio.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silge J, Wickham H, Luraschi J (2024). pins: Pin, Discover, Share Resources. R package version 1.4.0.9000, https://github.com/rstudio/pins-r, https://pins.rstudio.com/.","code":"@Manual{,   title = {pins: Pin, Discover, and Share Resources},   author = {Julia Silge and Hadley Wickham and Javier Luraschi},   year = {2024},   note = {R package version 1.4.0.9000, https://github.com/rstudio/pins-r},   url = {https://pins.rstudio.com/}, }"},{"path":"https://pins.rstudio.com/dev/index.html","id":"pins-","dir":"","previous_headings":"","what":"Pin, Discover, and Share Resources","title":"Pin, Discover, and Share Resources","text":"pins package publishes data, models, R objects, making easy share across projects colleagues. can pin objects variety pin boards, including folders (share networked drive services like DropBox), Posit Connect, Databricks, Amazon S3, Google Cloud Storage, Azure storage, Microsoft 365 (OneDrive SharePoint). Pins can automatically versioned, making straightforward track changes, re-run analyses historical data, undo mistakes. can use pins Python well R. example, can use one language read pin created . Learn pins Python.","code":""},{"path":"https://pins.rstudio.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pin, Discover, and Share Resources","text":"can install pins CRAN : can install development version GitHub:","code":"install.packages(\"pins\") # install.packages(\"pak\") pak::pak(\"rstudio/pins-r\")"},{"path":"https://pins.rstudio.com/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Pin, Discover, and Share Resources","text":"use pins package, must first create pin board. good place start board_folder(), stores pins directory specify. ’ll use special version board_folder() called board_temp() creates temporary board ’s automatically deleted R session ends. great examples, obviously shouldn’t use real work! can “pin” (save) data board pin_write(). takes three arguments: board pin , object, name: can see, data saved .rds default, depending ’re saving else want read , might use type argument instead save Parquet, Arrow, CSV, JSON file. can later retrieve pinned data pin_read(): board computer good place start, real power pins comes use board ’s shared multiple people. get started, can use board_folder() directory shared drive dropbox, use Posit Connect can use board_connect(): , someone else (automated Quarto report) can read use pin: can easily control gets access data using Posit Connect permissions pane. pins package also includes boards allow share data services like Databricks Volumes (board_databricks()), Amazon’s S3 (board_s3()), Azure’s blob storage (board_azure()), Google Cloud Storage (board_gcs()). Learn vignette(\"pins\").","code":"library(pins)  board <- board_temp() board #> Pin board <pins_board_folder> #> Path: #> '/var/folders/hv/hzsmmyk9393_m7q3nscx1slc0000gn/T/Rtmp4ETVv9/pins-28f423d40e5' #> Cache size: 0 board %>% pin_write(head(mtcars), \"mtcars\") #> Guessing `type = 'rds'` #> Creating new version '20241003T231743Z-8dce8' #> Writing to pin 'mtcars' board %>% pin_read(\"mtcars\") #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 board <- board_connect() #> Connecting to Posit Connect 2024.08.0 at <https://pub.current.posit.team> board %>% pin_write(tidy_sales_data, \"sales-summary\", type = \"rds\") #> Writing to pin 'hadley/sales-summary' board <- board_connect() board %>% pin_read(\"hadley/sales-summary\")"},{"path":"https://pins.rstudio.com/dev/reference/board_azure.html","id":null,"dir":"Reference","previous_headings":"","what":"Use an Azure storage container as a board — board_azure","title":"Use an Azure storage container as a board — board_azure","text":"Pin data container Azure storage using AzureStor package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_azure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use an Azure storage container as a board — board_azure","text":"","code":"board_azure(   container,   path = \"\",   n_processes = 10,   versioned = TRUE,   cache = NULL )"},{"path":"https://pins.rstudio.com/dev/reference/board_azure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use an Azure storage container as a board — board_azure","text":"container azure storage container created AzureStor::blob_container() similar. path Path directory container store pins. created already exist. equivalent prefix AWS S3 storage. n_processes Maximum number processes used parallel uploads/downloads. versioned board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_azure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use an Azure storage container as a board — board_azure","text":"can create board services AzureStor supports: blob storage, file storage Azure Data Lake Storage Gen2 (ADLSgen2). Blob storage classic storage service familiar people, relatively old inefficient. ADLSgen2 modern replacement API working blobs much faster working directories. consider using rather classic blob API possible; see examples . board_azure() powered AzureStor package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"AzureStor\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_azure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use an Azure storage container as a board — board_azure","text":"","code":"if (requireNamespace(\"AzureStor\")) {   # Public access board   url <- \"https://pins.blob.core.windows.net/public-data\"   container <- AzureStor::blob_container(url)   board <- board_azure(container)   board %>% pin_read(\"mtcars\") } #> Loading required namespace: AzureStor #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  if (FALSE) { # \\dontrun{ # To create a board that you can write to, you'll need to supply one # of `key`, `token`, or `sas` to AzureStor::blob_container() # First, we create a board using the classic Azure blob API url <- \"https://myaccount.blob.core.windows.net/mycontainer\" container <- AzureStor::blob_container(url, sas = \"my-sas\") board <- board_azure(container, \"path/to/board\") board %>% pin_write(iris)  # ADLSgen2 is a modern, efficient way to access blobs # - Use 'dfs' instead of 'blob' in the account URL to use the ADLSgen2 API # - Use the 'storage_container' generic instead of the service-specific #   'blob_container' # - We reuse the board created via the blob API above adls_url <- \"https://myaccount.dfs.core.windows.net/mycontainer\" container <- AzureStor::storage_container(adls_url, sas = \"my-sas\") board <- board_azure(container, \"path/to/board\") board %>% pin_list() board %>% pin_read(\"iris\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve default cache path — board_cache_path","title":"Retrieve default cache path — board_cache_path","text":"Retrieves default path used cache boards pins. Makes use rappdirs::user_cache_dir() cache folders defined OS. Remember can set cache location individual board object via cache argument.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve default cache path — board_cache_path","text":"","code":"board_cache_path(name)"},{"path":"https://pins.rstudio.com/dev/reference/board_cache_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve default cache path — board_cache_path","text":"name Board name","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_cache_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve default cache path — board_cache_path","text":"several environment variables available control location default pins cache: Use PINS_CACHE_DIR set cache path pins functions Use R_USER_CACHE_DIR set cache path functions use rappdirs system like AWS Lambda read (example, /tmp writeable), set either base::tempdir(). may also need set environment variables like HOME /R_USER_DATA_DIR session temporary directory.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_cache_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve default cache path — board_cache_path","text":"","code":"# retrieve default cache path board_cache_path(\"local\") #> ~/.cache/pins/local  # set with env vars: withr::with_envvar(   c(\"PINS_CACHE_DIR\" = \"/path/to/cache\"),   board_cache_path(\"local\") ) #> /path/to/cache/local withr::with_envvar(   c(\"R_USER_CACHE_DIR\" = \"/path/to/cache\"),   board_cache_path(\"local\") ) #> /path/to/cache/pins/local"},{"path":"https://pins.rstudio.com/dev/reference/board_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Posit Connect as board — board_connect","title":"Use Posit Connect as board — board_connect","text":"use Posit Connect board, need first authenticate. easiest way using RStudio IDE choosing Tools - Global Options - Publishing - Connect, following instructions. can share pins others Posit Connect changing viewers document specific users groups. accomplished opening new published pin changing access settings tab. shared pin, automatically available others.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Posit Connect as board — board_connect","text":"","code":"board_connect(   auth = c(\"auto\", \"manual\", \"envvar\", \"rsconnect\"),   server = NULL,   account = NULL,   key = NULL,   cache = NULL,   name = \"posit-connect\",   versioned = TRUE,   use_cache_on_failure = is_interactive() )  board_rsconnect(   auth = c(\"auto\", \"manual\", \"envvar\", \"rsconnect\"),   server = NULL,   account = NULL,   key = NULL,   output_files = FALSE,   cache = NULL,   name = \"posit-connect\",   versioned = TRUE,   use_cache_on_failure = is_interactive() )"},{"path":"https://pins.rstudio.com/dev/reference/board_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Posit Connect as board — board_connect","text":"auth three ways authenticate: auth = \"manual\" uses arguments server key. auth = \"envvar\" uses environment variables CONNECT_API_KEY CONNECT_SERVER. auth = \"rsconnect\" uses servers registered rsconnect package (filtered server account, provided) default, auth = \"auto\", automatically picks three options, using \"manual\" server key provided, \"envvar\" environment variables set, \"rsconnect\" otherwise. server auth = \"manual\" auth = 'envvar', full url server, like http://server.posit.co/rsc https://connect.posit.co/. auth = 'rsconnect' host name used disambiguate Connect accounts, like server.posit.co connect.posit.co. account user name used disambiguate multiple Connect accounts. key Posit Connect API key. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. name optional name used identify board. longer generally needed since passing around explicit board object. versioned board registered support versions? use_cache_on_failure pin fails download, OK use last cached version? Defaults is_interactive() robust poor internet connectivity exploring interactively, get clear errors code deployed. Note argument controls whether use cache reading pins, create board object unless can connect Connect server. output_files longer supported.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_connect.html","id":"public-pins","dir":"Reference","previous_headings":"","what":"Public pins","title":"Use Posit Connect as board — board_connect","text":"Posit Connect instance allows , can share pin publicly setting access type :   (can also Posit Connect setting \"Access\" \"Anyone - login required\") Now anyone can read pin board_url():   can find URL pin pin_browse().","code":"board %>% pin_write(my_df, access_type = \"all\") board <- board_url(c(   numbers = \"https://pub.current.posit.team/public/great-numbers/\" )) board %>% pin_read(\"numbers\")"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/board_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use Posit Connect as board — board_connect","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_connect() # Share the mtcars with your team board %>% pin_write(mtcars, \"mtcars\")  # Download a shared dataset board %>% pin_read(\"timothy/mtcars\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_connect_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","title":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","text":"board_connect_url() lets build board individual vanity urls. board_connect_url() read , support versioning.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_connect_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","text":"","code":"board_connect_url(   vanity_urls,   cache = NULL,   use_cache_on_failure = is_interactive(),   headers = connect_auth_headers() )  connect_auth_headers(key = Sys.getenv(\"CONNECT_API_KEY\"))"},{"path":"https://pins.rstudio.com/dev/reference/board_connect_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","text":"vanity_urls named character vector Connect vanity URLs, including trailing slash. board read , best way write pin Connect board_connect(). cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. use_cache_on_failure pin fails download, ok use last cached version? Defaults is_interactive() robust poor internet connectivity exploring interactively, get clear errors code deployed. headers Named character vector additional HTTP headers (authentication). See connect_auth_headers() Posit Connect support. key Posit Connect API key.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_connect_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","text":"board thin wrapper around board_url() uses connect_auth_headers() authentication via environment variable.","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/board_connect_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a vector of Posit Connect vanity URLs as a board — board_connect_url","text":"","code":"if (FALSE) { # interactive() connect_auth_headers()  board <- board_connect_url(c(     my_vanity_url_pin = \"https://pub.current.posit.team/public/great-numbers/\" ))  board %>% pin_read(\"my_vanity_url_pin\") }"},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Databricks Volume as a board — board_databricks","title":"Use a Databricks Volume as a board — board_databricks","text":"Pin data Databricks Volume","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Databricks Volume as a board — board_databricks","text":"","code":"board_databricks(   folder_url,   host = NULL,   prefix = NULL,   versioned = TRUE,   cache = NULL )"},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Databricks Volume as a board — board_databricks","text":"folder_url path target folder inside Unity Catalog. path must include catalog, schema, volume names, preceded 'Volumes/', like \"/Volumes/-catalog/-schema/-volume\". host Workspace Instance URL. Defaults NULL. NULL, search URL two different environment variables, order: 'DATABRICKS_HOST' 'CONNECT_DATABRICKS_HOST' prefix Prefix within folder board occupy. can use maintain multiple independent pin boards within single Databricks Volume. Make sure end '/', take advantage Databricks Volume directory-like handling. versioned board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Use a Databricks Volume as a board — board_databricks","text":"board_databricks() searches authentication token three different places, order: 'DATABRICKS_TOKEN' environment variable 'CONNECT_DATABRICKS_TOKEN' environment variable OAuth Databricks token inside RStudio API cases, authentication Personal Authentication Token ('PAT') saved 'DATABRICKS_TOKEN' environment variable. obtain 'PAT' see: Databricks personal access token authentication.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a Databricks Volume as a board — board_databricks","text":"functions pins create new Databricks Volume. board_databricks() powered httr2 package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"httr2\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_databricks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Databricks Volume as a board — board_databricks","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_databricks(\"/Volumes/my-catalog/my-schema/my-volume\") board %>% pin_write(mtcars) board %>% pin_read(\"mtcars\")  # A prefix allows you to have multiple independent boards in the same folder. project_1 <- board_databricks(   folder_url = \"/Volumes/my-catalog/my-schema/my-volume\",   prefix = \"project1/\" ) project_2 <- board_databricks(   folder_url = \"/Volumes/my-catalog/my-schema/my-volume\",   prefix = \"project2/\" ) } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_deparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Deparse a board object — board_deparse","title":"Deparse a board object — board_deparse","text":"Returns R code recreate board re-run another computer. Goal capture location board, authorisation, since () leak credentials (b) deployment scenarios board auth read env vars.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_deparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deparse a board object — board_deparse","text":"","code":"board_deparse(board, ...)  # S3 method for class 'pins_board_azure' board_deparse(board, ...)  # S3 method for class 'pins_board_connect' board_deparse(board, ...)  # S3 method for class 'pins_board_folder' board_deparse(board, ...)  # S3 method for class 'pins_board_gcs' board_deparse(board, ...)  # S3 method for class 'pins_board_kaggle_competition' board_deparse(board, ...)  # S3 method for class 'pins_board_kaggle_dataset' board_deparse(board, ...)  # S3 method for class 'pins_board_s3' board_deparse(board, ...)  # S3 method for class 'pins_board_url' board_deparse(board, ...)"},{"path":"https://pins.rstudio.com/dev/reference/board_deparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deparse a board object — board_deparse","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_deparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deparse a board object — board_deparse","text":"call.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_deparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deparse a board object — board_deparse","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_connect() # Generate code to access this board from elsewhere board_deparse(board) } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a local folder as board — board_folder","title":"Use a local folder as board — board_folder","text":"board_folder() creates board inside folder. can use share files using folder shared network drive inside DropBox. board_local() creates board system data directory. useful want share pins R sessions computer, care data lives. board_temp() creates temporary board lives session specific temporary directory. automatically deleted current R session ends. useful examples tests.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a local folder as board — board_folder","text":"","code":"board_folder(path, versioned = FALSE)  board_local(versioned = FALSE)  board_temp(versioned = FALSE)"},{"path":"https://pins.rstudio.com/dev/reference/board_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a local folder as board — board_folder","text":"path Path directory store pins. created already exist. versioned board registered support versions?","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/board_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a local folder as board — board_folder","text":"","code":"# session-specific local board board <- board_temp()"},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Google Cloud Storage bucket as a board — board_gcs","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"Pin data Google Cloud Storage bucket using googleCloudStorageR package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"","code":"board_gcs(bucket, prefix = NULL, versioned = TRUE, cache = NULL)"},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"bucket Bucket name. can write existing bucket, can use googleCloudStorageR::gcs_get_global_bucket() . prefix Prefix within bucket board occupy. can use maintain multiple independent pin boards within single GCS bucket. typically end / take advantage Google Cloud Storage's directory-like handling. versioned board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"board_gcs() powered googleCloudStorageR package provides several authentication options, documented main vignette. two main options create service account key (JSON file) authentication token; can manage either using gargle package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"functions pins create new bucket. can create new bucket R googleCloudStorageR::gcs_create_bucket(). can pass arguments googleCloudStorageR::gcs_upload predefinedAcl upload_type dots pin_write(). board_gcs() powered googleCloudStorageR package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"googleCloudStorageR\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Google Cloud Storage bucket as a board — board_gcs","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_gcs(\"pins-testing\") board %>% pin_write(mtcars) board %>% pin_read(\"mtcars\")  # A prefix allows you to have multiple independent boards in the same pin. board_sales <- board_gcs(\"company-pins\", prefix = \"sales/\") board_marketing <- board_gcs(\"company-pins\", prefix = \"marketing/\") # You can make the hierarchy arbitrarily deep.  # Pass arguments like `predefinedAcl` through the dots of `pin_write`: board %>% pin_write(mtcars, predefinedAcl = \"publicRead\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_gdrive.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Google Drive folder as a board — board_gdrive","title":"Use a Google Drive folder as a board — board_gdrive","text":"Pin data folder Google Drive using googledrive package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gdrive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Google Drive folder as a board — board_gdrive","text":"","code":"board_gdrive(path, versioned = TRUE, cache = NULL)"},{"path":"https://pins.rstudio.com/dev/reference/board_gdrive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Google Drive folder as a board — board_gdrive","text":"path Path existing directory Google Drive store pins. Can given actual path like \"path//folder\" (character), file id URL marked googledrive::as_id(), googledrive::dribble. versioned board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gdrive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a Google Drive folder as a board — board_gdrive","text":"functions pins create new Google Drive folder. can create new folder R googledrive::drive_mkdir(), set sharing folder googledrive::drive_share(). problems authentication Google Drive, learn googledrive::drive_auth(). board_gdrive() powered googledrive package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"googledrive\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_gdrive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Google Drive folder as a board — board_gdrive","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_gdrive(\"folder-for-my-pins\") board %>% pin_write(1:10, \"great-integers\", type = \"json\") board %>% pin_read(\"great-integers\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_kaggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Use kaggle datasets/competitions as a board — board_kaggle","title":"Use kaggle datasets/competitions as a board — board_kaggle","text":"functions longer supported changes Kaggle API removed future version pins. recommend use Kaggle CLI instead. board_kaggle_competition() allows treat Kaggle competition like read-board, making easy get data computer. board_kaggle_dataset() lets upload download files kaggle dataset. Data re-downloaded changes. boards work best pin_download() pin_upload() since pin_read() pin_write() good fit Kaggle model.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_kaggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use kaggle datasets/competitions as a board — board_kaggle","text":"","code":"board_kaggle_competitions(username = NULL, key = NULL, cache = NULL)  # S3 method for class 'pins_board_kaggle_competition' pin_search(   board,   search = NULL,   sort_by = c(\"grouped\", \"prize\", \"earliestDeadline\", \"latestDeadline\", \"numberOfTeams\",     \"recentlyCreated\"),   page = 1,   user = NULL,   ... )  board_kaggle_dataset(username = NULL, key = NULL, cache = NULL)  # S3 method for class 'pins_board_kaggle_dataset' pin_search(   board,   search = NULL,   sort_by = c(\"hottest\", \"votes\", \"updated\", \"active\"),   page = 1,   user = NULL,   ... )  # S3 method for class 'pins_board_kaggle_dataset' pin_store(   board,   name,   paths,   metadata,   versioned = NULL,   ...,   private = TRUE,   license = \"CC0-1.0\" )"},{"path":"https://pins.rstudio.com/dev/reference/board_kaggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use kaggle datasets/competitions as a board — board_kaggle","text":"username, key Typically authenticate using \"~/.kaggle/kaggle.json\" file downloaded account page (clicking \"Create New API Token\". However, necessary can supply username key arguments ; can useful testing. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. board name board register. search string search pin name title. Use NULL return pins. sort_by sort results. page page results retrieve. user non-NULL filter specified user. ... Additional parameters required initialize particular board. name optional name used identify board. longer generally needed since passing around explicit board object. paths character vector file paths upload board. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. versioned board registered support versions? private dataset private (TRUE, default) public (FALSE)? license data licensed?","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_kaggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use kaggle datasets/competitions as a board — board_kaggle","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_kaggle_competitions() board  board %>% pin_meta(\"titanic\") paths <- board %>% pin_download(\"titanic\") paths head(read.csv(paths[[1]])) head(read.csv(paths[[2]])) } # } if (FALSE) { # \\dontrun{ board <- board_kaggle_dataset()  board %>% pin_search(\"cats\") board %>% pin_exists(\"rturley/pet-breed-characteristics\") board %>% pin_meta(\"rturley/pet-breed-characteristics\") board %>% pin_versions(\"rturley/pet-breed-characteristics\")  board %>% pin_versions(\"imsparsh/animal-breed-cats-and-dogs\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_ms365.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a OneDrive or Sharepoint document library as a board — board_ms365","title":"Use a OneDrive or Sharepoint document library as a board — board_ms365","text":"Pin data folder Onedrive SharePoint Online document library using Microsoft365R package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_ms365.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a OneDrive or Sharepoint document library as a board — board_ms365","text":"","code":"board_ms365(   drive,   path,   versioned = TRUE,   cache = NULL,   delete_by_item = FALSE )"},{"path":"https://pins.rstudio.com/dev/reference/board_ms365.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a OneDrive or Sharepoint document library as a board — board_ms365","text":"drive OneDrive SharePoint document library object, class Microsoft365R::ms_drive. path Path directory store pins. can either string containing pathname like \"path//board\", Microsoft365R::ms_drive_item object pointing board path. versioned board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. delete_by_item Whether handle folder deletions item--item basis, rather deleting entire folder . may need set TRUE board SharePoint Online OneDrive Business, due document protection policies prohibit deleting non-empty folders.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_ms365.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a OneDrive or Sharepoint document library as a board — board_ms365","text":"Sharing board OneDrive (personal business) bit complicated, OneDrive normally allows person owns drive access files folders. First, drive owner set board folder shared users, using either OneDrive web interface Microsoft365R's ms_drive_item$create_share_link() method. users call board_ms365 drive item object path argument, pointing shared folder. See examples . Sharing board SharePoint Online much straightforward, assuming users access document library: case, everyone can use call board_ms365(doclib, \"path//board\"). want share board users outside team, follow steps sharing board OneDrive. board_ms365() powered Microsoft365R package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"Microsoft365R\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_ms365.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a OneDrive or Sharepoint document library as a board — board_ms365","text":"","code":"if (FALSE) { # \\dontrun{ # A board in your personal OneDrive od <- Microsoft365R::get_personal_onedrive() board <- board_ms365(od, \"myboard\") board %>% pin_write(iris)  # A board in OneDrive for Business odb <- Microsoft365R::get_business_onedrive(tenant = \"mytenant\") board <- board_ms365(odb, \"myproject/board\")  # A board in a SharePoint Online document library sp <- Microsoft365R::get_sharepoint_site(\"my site\", tenant = \"mytenant\") doclib <- sp$get_drive() board <- board_ms365(doclib, \"general/project1/board\")   ## Sharing a board in OneDrive: # First, create the board on the drive owner's side board <- board_ms365(od, \"myboard\")  # Next, let other users write to the folder # - set the expiry to NULL if you want the folder to be permanently available od$get_item(\"myboard\")$create_share_link(\"edit\", expiry=\"30 days\")  # On the recipient's side: find the shared folder item, then pass it to board_ms365 shared_items <- od$list_shared_items() board_folder <- shared_items$remoteItem[[which(shared_items$name == \"myboard\")]] board <- board_ms365(od, board_folder) } # }"},{"path":"https://pins.rstudio.com/dev/reference/board_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Board registry (legacy API) — board_register","title":"Board registry (legacy API) — board_register","text":"legacy pins API uses board registry, first register board refer name calls pin functions.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board registry (legacy API) — board_register","text":"","code":"board_register(board, name = NULL, cache = NULL, versions = NULL, ...)  board_register_rsconnect(   name = \"rsconnect\",   server = NULL,   account = NULL,   key = NULL,   output_files = FALSE,   cache = NULL,   ... )  board_deregister(name, ...)  board_default()  board_list()  board_get(name)"},{"path":"https://pins.rstudio.com/dev/reference/board_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Board registry (legacy API) — board_register","text":"","code":"# legacy API board_register_local(\"myboard\", cache = tempfile()) #> Warning: `board_register_local()` was deprecated in pins 1.4.0. #> ℹ Learn more at <https://pins.rstudio.com/articles/pins-update.html> pin(mtcars, board = \"myboard\") #> Warning: `pin()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_write()` instead. pin_get(\"mtcars\", board = \"myboard\") #> Warning: `pin_get()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_read()` instead. #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # modern API (not available for all boards) board <- board_temp() board %>% pin_write(mtcars) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> Creating new version '20241007T174936Z-b9134' #> Writing to pin 'mtcars' board %>% pin_read(\"mtcars\") #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"Use an S3 bucket as a board — board_s3","title":"Use an S3 bucket as a board — board_s3","text":"Pin data S3 bucket, Amazon's S3 service MinIO, using paws.storage package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use an S3 bucket as a board — board_s3","text":"","code":"board_s3(   bucket,   prefix = NULL,   versioned = TRUE,   access_key = NULL,   secret_access_key = NULL,   session_token = NULL,   credential_expiration = NULL,   profile = NULL,   region = NULL,   endpoint = NULL,   cache = NULL )"},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use an S3 bucket as a board — board_s3","text":"bucket Bucket name. can write existing bucket. prefix Prefix within bucket board occupy. can use maintain multiple independent pin boards within single S3 bucket. typically end / take advantage S3's directory-like handling. versioned board registered support versions? access_key, secret_access_key, session_token, credential_expiration Manually control authentication. See documentation details. profile Role use AWS shared credentials/config file. region AWS region. specified, read AWS_REGION, AWS config file. endpoint Endpoint use; usually generated automatically AWS region. MinIO, use full URL (including scheme like https://) MinIO endpoint. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Use an S3 bucket as a board — board_s3","text":"board_s3() powered paws package provides wide range authentication options, documented https://github.com/paws-r/paws/blob/main/docs/credentials.md. brief, four main options tried order: access_key secret_access_key arguments function. temporary session token, also need supply session_token credential_expiration. (recommended since secret_access_key recorded .Rhistory) AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY env vars. (AWS_SESSION_TOKEN AWS_CREDENTIAL_EXPIRATION env vars temporary session token) AWS shared credential file, ~/.aws/credentials:   \"default\" profile used supply access key secret access key described . Otherwise can use profile argument use profile choice. Automatic authentication EC2 instance container IAM role. See paws documentation unusual options including getting credentials command line process, picking role running inside EC2 instance, using role another profile, using multifactor authentication.","code":"[profile-name] aws_access_key_id=your AWS access key aws_secret_access_key=your AWS secret key"},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use an S3 bucket as a board — board_s3","text":"functions pins create new bucket. can create new bucket R paws. functions like pin_list() work S3 board, return useful output. can pass arguments paws.storage::s3_put_object Tagging ServerSideEncryption dots pin_write(). (Note separate pin_write() arguments like tags.) board_s3() powered paws.storage package, suggested dependency pins (required pins general). run errors deploying content server like https://www.shinyapps.io Connect, add requireNamespace(\"paws.storage\") app document automatic dependency discovery.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_s3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use an S3 bucket as a board — board_s3","text":"","code":"if (FALSE) { # \\dontrun{ board <- board_s3(\"pins-test-hadley\", region = \"us-east-2\") board %>% pin_write(mtcars) board %>% pin_read(\"mtcars\")  # A prefix allows you to have multiple independent boards in the same pin. board_sales <- board_s3(\"company-pins\", prefix = \"sales/\") board_marketing <- board_s3(\"company-pins\", prefix = \"marketing/\") # You can make the hierarchy arbitrarily deep.  # Pass S3 arguments like `Tagging` through the dots of `pin_write`: board %>% pin_write(mtcars, Tagging = \"key1=value1&key2=value2\")  } # }"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/board_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Board — board_test","text":"","code":"board_test(board, exclude = list(), suite = c(\"default\", \"versions\"))"},{"path":"https://pins.rstudio.com/dev/reference/board_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Board — board_test","text":"board name board test. exclude Names tests exclude form test. suite test suite run, currently \"versions\" default supported.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Board — board_test","text":"Tests particular board, useful creating new boards.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a vector of URLs as a board — board_url","title":"Use a vector of URLs as a board — board_url","text":"board_url() lets build board individual urls manifest file. board_url() read .","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a vector of URLs as a board — board_url","text":"","code":"board_url(   urls,   cache = NULL,   use_cache_on_failure = is_interactive(),   headers = NULL )"},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a vector of URLs as a board — board_url","text":"urls Identify available pins served URL set URLs (see details): Unnamed string: URL manifest file. Named character vector: URLs specific pins (support versioning). Named list: URLs pin version directories (supports versioning). cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. use_cache_on_failure pin fails download, ok use last cached version? Defaults is_interactive() robust poor internet connectivity exploring interactively, get clear errors code deployed. headers Named character vector additional HTTP headers (authentication). See connect_auth_headers() Posit Connect support.","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a vector of URLs as a board — board_url","text":"way board_url() works depends type urls argument: Unnamed character scalar, .e. single URL manifest file: URL ends /, board_url() look _pins.yaml manifest. manifest file parses named list, versioning supported. parses named character vector, board support versioning. Named character vector URLs: URLs end /, board_url() look data.txt provides metadata associated pin. easiest way generate file upload pin version directory created board_folder(). Versioning supported. Named list, values character vectors URLs element vector refers version particular pin: URL ends /, board_url() look data.txt provides metadata. Versioning supported. Using vector URLs can useful pin_download() pin_read() cached; re-download data changed last time downloaded (using tools HTTP caching). also protected vagaries internet; fresh download fails, get previously cached result warning. Using manifest file can useful can serve board pins allow collaborators access board straight URL, without worrying board-level storage details. examples provided vignette(\"using-board-url\").","code":""},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":"authentication-for-board-url-","dir":"Reference","previous_headings":"","what":"Authentication for board_url()","title":"Use a vector of URLs as a board — board_url","text":"headers argument allows pass authentication details HTTP headers board, Posit Connect vanity URL public (see board_connect_url()) private GitHub repo.","code":"gh_pat_auth <- c(   Authorization = paste(\"token\", \"github_pat_XXXX\") ) board <- board_url(   \"https://raw.githubusercontent.com/username/repo/main/path/to/pins\",   headers = gh_pat_auth )  board %>% pin_list()"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/board_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a vector of URLs as a board — board_url","text":"","code":"github_raw <- function(x) paste0(\"https://raw.githubusercontent.com/\", x)  ## with a named vector of URLs to specific pins: b1 <- board_url(c(   files = github_raw(\"rstudio/pins-r/main/tests/testthat/pin-files/\"),   rds = github_raw(\"rstudio/pins-r/main/tests/testthat/pin-rds/\"),   raw = github_raw(\"rstudio/pins-r/main/tests/testthat/pin-files/first.txt\") ))  b1 %>% pin_read(\"rds\") #>     x #> 1   1 #> 2   2 #> 3   3 #> 4   4 #> 5   5 #> 6   6 #> 7   7 #> 8   8 #> 9   9 #> 10 10 b1 %>% pin_browse(\"rds\", local = TRUE) #> ℹ Pin at <~/.cache/pins/url/5e3ed054e0c263a996340d449a12324b>  b1 %>% pin_download(\"files\") #> [1] \"~/.cache/pins/url/6a19374ae8fd88eaccc9cbd6e3022001/first.txt\"  #> [2] \"~/.cache/pins/url/6a19374ae8fd88eaccc9cbd6e3022001/second.txt\" b1 %>% pin_download(\"raw\") #> [1] \"~/.cache/pins/url/4bb0af0abae87c78f4a1b6fbe7e2642c/first.txt\"  ## with a manifest file: b2 <- board_url(github_raw(\"rstudio/pins-r/main/tests/testthat/pin-board/\")) b2 %>% pin_list() #> [1] \"x\" \"y\" b2 %>% pin_versions(\"y\") #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20221215T180357Z-9ae7a 2022-12-15 18:03:57 9ae7a #> 2 20221215T180400Z-b81d5 2022-12-15 18:04:00 b81d5"},{"path":"https://pins.rstudio.com/dev/reference/cache_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Cache management — cache_browse","title":"Cache management — cache_browse","text":"boards maintain local cache reading pin changed since last time read , can rapidly retrieved local cache. functions help manage cache. cache_browse(): open cache directory interactive exploration. cache_info(): report much disk space board's cache uses. cache_prune(): delete pin versions used days (asked confirm deletion happens). general, real harm deleting cached pins, re-downloaded needed. one exception legacy_local() mistakenly stored pinned data cache directory; touch directory.","code":""},{"path":"https://pins.rstudio.com/dev/reference/cache_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cache management — cache_browse","text":"","code":"cache_browse()  cache_info()  cache_prune(days = 30)"},{"path":"https://pins.rstudio.com/dev/reference/cache_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cache management — cache_browse","text":"days Number days preserve cached data; pin versions older days removed.","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/custom-boards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Boards — board_pin_create","text":"","code":"board_pin_create(board, path, name, metadata, ...)  board_initialize(board, ...)  board_browse(board, ...)  board_desc(board, ...)  board_pin_get(board, name, ...)  board_pin_remove(board, name, ...)  board_pin_find(board, text, ...)  board_pin_versions(board, name, ...)"},{"path":"https://pins.rstudio.com/dev/reference/custom-boards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Boards — board_pin_create","text":"board board extend, retrieved board_get(). path path store pin. name name pin. metadata list metadata associated pin. ... Additional parameters. text text pattern find pin.","code":""},{"path":"https://pins.rstudio.com/dev/reference/custom-boards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom Boards — board_pin_create","text":"Family functions meant used implement custom boards extensions, used users.","code":""},{"path":"https://pins.rstudio.com/dev/reference/custom-pins.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Pins — pin_load","title":"Custom Pins — pin_load","text":"Family functions meant used implement custom pin extensions, used users.","code":""},{"path":"https://pins.rstudio.com/dev/reference/custom-pins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Pins — pin_load","text":"","code":"pin_load(path, ...)  board_pin_store(   board,   path,   name,   pin_metadata,   extract = TRUE,   retrieve = TRUE,   zip = FALSE,   cache = TRUE,   metadata = NULL,   custom_metadata = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/custom-pins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Pins — pin_load","text":"path path store. ... Additional parameteres. board board extended, retrieved board_get(). name name pin. pin_metadata list pin metadata describing pin. Must contain type description. retrieve pin retrieved created? Defaults TRUE. metadata Additional user supplied metadata. custom_metadata Deprecated. Please use metadata instead.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_azure.html","id":null,"dir":"Reference","previous_headings":"","what":"Azure board (legacy API) — legacy_azure","title":"Azure board (legacy API) — legacy_azure","text":"use Microsoft Azure Storage board, need Azure Storage account, Azure Storage container, Azure Storage key.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_azure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure board (legacy API) — legacy_azure","text":"","code":"legacy_azure(   container = Sys.getenv(\"AZURE_STORAGE_CONTAINER\"),   account = Sys.getenv(\"AZURE_STORAGE_ACCOUNT\"),   key = Sys.getenv(\"AZURE_STORAGE_KEY\"),   cache = NULL,   name = \"azure\",   ... )  board_register_azure(   name = \"azure\",   container = Sys.getenv(\"AZURE_STORAGE_CONTAINER\"),   account = Sys.getenv(\"AZURE_STORAGE_ACCOUNT\"),   key = Sys.getenv(\"AZURE_STORAGE_KEY\"),   cache = NULL,   path = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/legacy_azure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Azure board (legacy API) — legacy_azure","text":"container name Azure Storage container. account name Azure Storage account. key access key Azure Storage container. can find \"Access keys\" storage account settings. key equivalent password, generally stored script. easiest alternative store AZURE_STORAGE_KEY environment variable, legacy_azure() use default. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board. path Subdirectory within url","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_azure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Azure board (legacy API) — legacy_azure","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires an Azure Storage key board_register_azure(   container = \"pinscontainer\",   account = \"pinsstorage\",   key = \"abcabcabcabcabcabcabcabcabcab==\" ) } # }"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/legacy_datatxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote ","text":"","code":"legacy_datatxt(   url,   headers = NULL,   cache = NULL,   needs_index = TRUE,   browse_url = url,   index_updated = NULL,   index_randomize = FALSE,   path = NULL,   versions = FALSE,   name = NULL,   ... )  board_register_datatxt(url, name = NULL, headers = NULL, cache = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/legacy_datatxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote ","text":"url Path data.txt file directory containing . headers Optional list headers include function generate . cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. needs_index board index file? browse_url currently used index_updated Callback function used update index index_randomize retrieving data.txt parameter random query string defeat caching? path Subdirectory within url versions board registered support versions? name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_datatxt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remote ","text":"Use board website uses data.txt specification. data.txt file YAML provides basic metadata directory files.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_datatxt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote ","text":"","code":"# register website board using datatxt file board_register_datatxt(   url = \"https://datatxt.org/data.txt\",   name = \"txtexample\",   cache = tempfile() ) #> Warning: `board_register_datatxt()` was deprecated in pins 1.4.0. #> ℹ Learn more at <https://pins.rstudio.com/articles/pins-update.html>  # find pins pin_find(board = \"txtexample\") #> Warning: `pin_find()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_search()` instead. #>     name #> 1   iris #> 2 mtcars #>                                                                                                                                                                                                                                                                         description #> 1 This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica. #> 2                                                                                             The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). #>    type      board #> 1 table txtexample #> 2 table txtexample"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/legacy_dospace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DigitalOcean board (legacy API) — legacy_dospace","text":"","code":"legacy_dospace(   space = Sys.getenv(\"DO_SPACE\"),   key = Sys.getenv(\"DO_ACCESS_KEY_ID\"),   secret = Sys.getenv(\"DO_SECRET_ACCESS_KEY\"),   datacenter = Sys.getenv(\"DO_DATACENTER\"),   cache = NULL,   host = \"digitaloceanspaces.com\",   name = \"dospace\",   ... )  board_register_dospace(   name = \"dospace\",   space = Sys.getenv(\"DO_SPACE\"),   key = Sys.getenv(\"DO_ACCESS_KEY_ID\"),   secret = Sys.getenv(\"DO_SECRET_ACCESS_KEY\"),   datacenter = Sys.getenv(\"DO_DATACENTER\"),   cache = NULL,   host = \"digitaloceanspaces.com\",   path = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/legacy_dospace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DigitalOcean board (legacy API) — legacy_dospace","text":"space name DigitalOcean space. key, secret key secret space. can create key secret \"Spaces access keys\" API settings. secret equivalent password, generally stored script. easiest alternative store DO_SECRET_ACCESS_KEY environment variable, legacy_dospace() use default. datacenter datacenter name. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. host host use storage, defaults \"digitaloceanspaces.com\". name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board. path Subdirectory within url","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_dospace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DigitalOcean board (legacy API) — legacy_dospace","text":"use DigitalOcean Spaces board, first need DigitalOcean space storage key. can sign-create digitalocean.com.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_dospace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DigitalOcean board (legacy API) — legacy_dospace","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires a DigitalOcean Spaces API key board <- legacy_dospace(bucket = \"s3bucket\") } # }"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/legacy_gcloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Google Cloud board (legacy API) — legacy_gcloud","text":"","code":"legacy_gcloud(   bucket = Sys.getenv(\"GCLOUD_STORAGE_BUCKET\"),   token = NULL,   cache = NULL,   name = \"gcloud\",   ... )  board_register_gcloud(   name = \"gcloud\",   bucket = Sys.getenv(\"GCLOUD_STORAGE_BUCKET\"),   token = NULL,   cache = NULL,   path = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/legacy_gcloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Google Cloud board (legacy API) — legacy_gcloud","text":"bucket name Google Cloud Storage bucket. Defaults GCLOUD_STORAGE_BUCKET environment variable. token access token Google Cloud Storage container. Generally, best leave NULL, rely installed Google Cloud SDK handle authentication. want use access token, can retrieve https://developers.google.com/oauthplayground. need authorize \"Google Storage API v1\" scope. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board. path Subdirectory within url","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_gcloud.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Google Cloud board (legacy API) — legacy_gcloud","text":"use Google Cloud Storage board, first need Google Cloud Storage account, Google Storage bucket, access token Google Cloud SDK properly installed configured. can sign-create https://console.cloud.google.com","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_gcloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Google Cloud board (legacy API) — legacy_gcloud","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires the Google Cloud SDK to be configured board <- legacy_gcloud(container = \"gcloudcontainer\") } # }"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/legacy_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GitHub board (legacy API) — legacy_github","text":"","code":"legacy_github(   repo,   branch = NULL,   token = NULL,   path = \"\",   host = \"https://api.github.com\",   name = \"github\",   cache = NULL,   ... )  board_register_github(   name = \"github\",   repo = NULL,   branch = NULL,   token = NULL,   path = \"\",   host = \"https://api.github.com\",   cache = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/legacy_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GitHub board (legacy API) — legacy_github","text":"repo GitHub repository formatted 'owner/repo'. branch branch use commit pins. Default, NULL, use main master present. token GitHub personal access token. Uses gitcreds set. path subdirectory repo pins stored. host URL GitHub API. need customise use GitHub enterprise, e.g. \"https://yourhostname/api/v3\". name optional name used identify board. longer generally needed since passing around explicit board object. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. ... Additional parameters required initialize particular board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_github.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GitHub board (legacy API) — legacy_github","text":"use GitHub board, need set authentication, following instructions https://happygitwithr.com/https-pat.html#https-pat.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_github.html","id":"large-files","dir":"Reference","previous_headings":"","what":"Large Files","title":"GitHub board (legacy API) — legacy_github","text":"GitHub repo supports files 25MB size (100MB theory additional overhead using GitHub API). store large files, GitHub recommends storing using GitHub Releases support 2GB files, pins uses. need anything extra happen behind scenes, surprised pins creates releases repo.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_github.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GitHub board (legacy API) — legacy_github","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires a GitHub API key board <- legacy_github(\"owner/repo\") } # }"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/legacy_kaggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kaggle board (legacy API) — legacy_kaggle","text":"","code":"legacy_kaggle(token = NULL, name = \"kaggle\", ...)  board_register_kaggle(name = \"kaggle\", token = NULL, cache = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/legacy_kaggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kaggle board (legacy API) — legacy_kaggle","text":"token Kaggle token path kaggle.json file, can NULL ~/.kaggle/kaggle.json file already exists. name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_kaggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kaggle board (legacy API) — legacy_kaggle","text":"functions longer supported changes Kaggle API removed future version pins. recommend use Kaggle CLI instead. use Kaggle board, need first download token file account.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_kaggle.html","id":"sharing","dir":"Reference","previous_headings":"","what":"Sharing","title":"Kaggle board (legacy API) — legacy_kaggle","text":"working teams, might want share pins others. can adding users making dataset public Kaggle's website. share specific users, can follow steps register Kaggle board allows download upload pins","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_kaggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kaggle board (legacy API) — legacy_kaggle","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires a Kaggle API token board <- legacy_kaggle(token = \"path/to/kaggle.json\")  pin_find(\"crowdflower\", board = board)  # names starting with c/ are competitions pin_get(\"c/crowdflower-weather-twitter\", board = board) } # }"},{"path":"https://pins.rstudio.com/dev/reference/legacy_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local board (legacy API) — legacy_local","title":"Local board (legacy API) — legacy_local","text":"legacy_local() powers board_register_local(), allows access local pins created earlier versions pins package. new pins, recommend transition board_local() supports new pins API. legacy_temp() creates legacy board temporary location, use tests examples.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local board (legacy API) — legacy_local","text":"","code":"legacy_local(path = NULL, name = \"local\", versions = FALSE)  board_register_local(name = \"local\", cache = NULL, ...)  legacy_temp(name = \"temp\", ...)"},{"path":"https://pins.rstudio.com/dev/reference/legacy_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local board (legacy API) — legacy_local","text":"path Path pins stored. supplied, defaults system cache directory, may deleted operating system run disk space. name optional name used identify board. longer generally needed since passing around explicit board object. versions board registered support versions? cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. ... Additional parameters required initialize particular board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local board (legacy API) — legacy_local","text":"","code":"# Old api pin(data.frame(x = 1:3), \"test\") pin_get(\"test\") #>   x #> 1 1 #> 2 2 #> 3 3  # New api board <- board_local() board %>% pin_write(data.frame(x = 1:3), \"test\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174939Z-1422a' #> Writing to pin 'test' board %>% pin_read(\"test\") #>   x #> 1 1 #> 2 2 #> 3 3"},{"path":"https://pins.rstudio.com/dev/reference/legacy_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 board (legacy API) — legacy_s3","title":"S3 board (legacy API) — legacy_s3","text":"use Amazon S3 Storage board, need Amazon S3 bucket user enough permissions access S3 bucket. can sign-create https://aws.amazon.com/. Note can take minutes created bucket usable. See board_s3() modern version legacy board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 board (legacy API) — legacy_s3","text":"","code":"legacy_s3(   bucket = Sys.getenv(\"AWS_BUCKET\"),   key = Sys.getenv(\"AWS_ACCESS_KEY_ID\"),   secret = Sys.getenv(\"AWS_SECRET_ACCESS_KEY\"),   cache = NULL,   region = NULL,   host = \"s3.amazonaws.com\",   name = \"s3\",   ... )  board_register_s3(   name = \"s3\",   bucket = Sys.getenv(\"AWS_BUCKET\"),   key = Sys.getenv(\"AWS_ACCESS_KEY_ID\"),   secret = Sys.getenv(\"AWS_SECRET_ACCESS_KEY\"),   cache = NULL,   host = \"s3.amazonaws.com\",   region = NULL,   path = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/legacy_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 board (legacy API) — legacy_s3","text":"bucket name Amazon S3 bucket. key, secret key secret space. can create key secret \"Spaces access keys\" API settings. secret equivalent password, generally stored script. easiest alternative store AWS_SECRET_ACCESS_KEY environment variable, board_s3() use default. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. region region use, required AWS regions enable V4 signatures. host host use storage, defaults \"s3.amazonaws.com\". name optional name used identify board. longer generally needed since passing around explicit board object. ... Additional parameters required initialize particular board. path Subdirectory within url","code":""},{"path":"https://pins.rstudio.com/dev/reference/legacy_s3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 board (legacy API) — legacy_s3","text":"","code":"if (FALSE) { # \\dontrun{ # the following example requires an Amazon S3 API key board <- legacy_s3(bucket = \"s3bucket\") } # }"},{"path":"https://pins.rstudio.com/dev/reference/new_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new board — new_board","title":"Create a new board — new_board","text":"Create new board","code":""},{"path":"https://pins.rstudio.com/dev/reference/new_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new board — new_board","text":"","code":"new_board(board, api, cache, ...)  new_board_v0(board, name, cache = NULL, versions = FALSE, ...)  new_board_v1(board, cache, versioned = FALSE, ...)"},{"path":"https://pins.rstudio.com/dev/reference/new_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new board — new_board","text":"board name board register. cache Cache path. Every board requires local cache avoid downloading files multiple times. default stores standard cache location operating system, can override needed. ... Additional parameters required initialize particular board. name optional name used identify board. longer generally needed since passing around explicit board object. versions board registered support versions? versioned board registered support versions?","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pin a resource (legacy API) — pin","text":"","code":"pin(x, name = NULL, description = NULL, board = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pin a resource (legacy API) — pin","text":"x object, local file remote URL pin. name name dataset object. description Optional description pin. board board pin placed. ... Additional parameters.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pin a resource (legacy API) — pin","text":"Pins given resource locally given board. pin() allows cache remote resources intermediate results ease. caching remote resources, usually URLs, check HTTP caching headers avoid re-downloading remote result changed. makes ideal support reproducible research requiring manual instruction download resources running R script. addition, pin() still works working offline remote resource becomes unavailable; happens, warning triggered code continue work. pin() stores data frames two files, R native file (RDS) 'CSV' file. force saving pin R's native format , can use pin((data)). can improve performance size cost making pin unreadable tools programming languages.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pin a resource (legacy API) — pin","text":"","code":"# old API board_register_local(cache = tempfile()) pin(mtcars) pin_get(\"mtcars\") #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # new api board <- board_local() board %>% pin_write(mtcars) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> Creating new version '20241007T174940Z-b9134' #> Writing to pin 'mtcars' board %>% pin_read(\"mtcars\") #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://pins.rstudio.com/dev/reference/pin_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse source of a pin — pin_browse","title":"Browse source of a pin — pin_browse","text":"pin_browse() navigates home pin, either internet local file system.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse source of a pin — pin_browse","text":"","code":"pin_browse(board, name, version = NULL, local = FALSE)"},{"path":"https://pins.rstudio.com/dev/reference/pin_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse source of a pin — pin_browse","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. local TRUE, open local copy pin; otherwise show home pin internet.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse source of a pin — pin_browse","text":"","code":"board <- board_temp(versioned = TRUE) board %>% pin_write(1:10, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174940Z-76a69' #> Writing to pin 'x' board %>% pin_write(1:11, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174940Z-8bb6c' #> Writing to pin 'x' board %>% pin_write(1:12, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174941Z-8e80a' #> Writing to pin 'x'  board %>% pin_browse(\"x\", local = TRUE) #> ℹ Pin at <\/tmp/Rtmp1rTBAJ/pins-177458af2df1/x/20241007T174941Z-8e80a>"},{"path":"https://pins.rstudio.com/dev/reference/pin_default_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Pin Name — pin_default_name","title":"Create Pin Name — pin_default_name","text":"Creates pin name character expression generated deparse(substitute(x)).","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_default_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Pin Name — pin_default_name","text":"","code":"pin_default_name(x, board)"},{"path":"https://pins.rstudio.com/dev/reference/pin_default_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Pin Name — pin_default_name","text":"x expression generate  pin name . board board name generating .","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a pin — pin_delete","title":"Delete a pin — pin_delete","text":"Delete pin (pins), removing board","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a pin — pin_delete","text":"","code":"pin_delete(board, names, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a pin — pin_delete","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. names names one pins delete ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a pin — pin_delete","text":"","code":"board <- board_temp() board %>% pin_write(1:5, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174941Z-87646' #> Writing to pin 'x' board %>% pin_write(mtcars) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> Creating new version '20241007T174941Z-b9134' #> Writing to pin 'mtcars' board %>% pin_write(runif(1e6), \"y\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174942Z-4dcab' #> Writing to pin 'y' board %>% pin_list() #> [1] \"mtcars\" \"x\"      \"y\"       board %>% pin_delete(c(\"x\", \"y\")) board %>% pin_list() #> [1] \"mtcars\""},{"path":"https://pins.rstudio.com/dev/reference/pin_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload and download files to and from a board — pin_download","title":"Upload and download files to and from a board — pin_download","text":"lower-level interface pin_read() pin_write() can use pin file, opposed R object. path returned pin_download() read-path cached file: never attempt modify file.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload and download files to and from a board — pin_download","text":"","code":"pin_download(board, name, version = NULL, hash = NULL, ...)  pin_upload(   board,   paths,   name = NULL,   ...,   title = NULL,   description = NULL,   metadata = NULL,   tags = NULL,   urls = NULL )"},{"path":"https://pins.rstudio.com/dev/reference/pin_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload and download files to and from a board — pin_download","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. hash Specify hash verify get exactly dataset expect. can find hash existing pin looking pin_hash pin_meta(). ... Additional arguments passed methods specific board. paths character vector file paths upload board. title title pin; important shared boards others can understand pin contains. omitted, brief description contents automatically generated. description detailed description pin contents. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. tags character vector tags pin; important discoverability shared boards. urls character vector URLs info pin, link wiki documentation.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload and download files to and from a board — pin_download","text":"pin_download() returns character vector file paths; pin_upload() returns fully qualified name new pin, invisibly.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload and download files to and from a board — pin_download","text":"","code":"board <- board_temp()  board %>% pin_upload(system.file(\"CITATION\")) #> Guessing `name = 'CITATION'` #> Creating new version '20241007T174942Z-f5b9d' path <- board %>% pin_download(\"CITATION\") path #> [1] \"/tmp/Rtmp1rTBAJ/pins-177497ecb77/CITATION/20241007T174942Z-f5b9d/CITATION\" readLines(path)[1:5] #> [1] \"bibentry(\\\"Manual\\\",\"                                                          #> [2] \"         title = \\\"R: A Language and Environment for Statistical Computing\\\",\" #> [3] \"         author = person(\\\"R Core Team\\\"),\"                                    #> [4] \"         organization = \\\"R Foundation for Statistical Computing\\\",\"           #> [5] \"         address      = \\\"Vienna, Austria\\\",\""},{"path":"https://pins.rstudio.com/dev/reference/pin_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a pin exists — pin_exists","title":"Determine if a pin exists — pin_exists","text":"Determine pin exists","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a pin exists — pin_exists","text":"","code":"pin_exists(board, name, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a pin exists — pin_exists","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch/store a pin — pin_fetch","title":"Fetch/store a pin — pin_fetch","text":"low-level functions power pin_read(), pin_write(), pin_upload(), pin_download(). needed primarily folks developing new board types, generally called directly.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch/store a pin — pin_fetch","text":"","code":"pin_fetch(board, name, version = NULL, ...)  pin_store(board, name, paths, metadata, versioned = NULL, x = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch/store a pin — pin_fetch","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. ... Additional arguments passed methods specific board. paths character vector file paths upload board. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. versioned pin versioned? default, NULL, use default board x object (typically data frame) pin.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch/store a pin — pin_fetch","text":"pin_fetch() called primarily side-effect downloading remote pins local cache. returns data pin_meta. pin_store() called side-effect uploading local file remote board. invisibly returns fully qualified pin name.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch/store a pin — pin_fetch","text":"","code":"board <- board_temp()  board %>% pin_upload(system.file(\"CITATION\")) #> Guessing `name = 'CITATION'` #> Creating new version '20241007T174943Z-f5b9d' path <- board %>% pin_download(\"CITATION\") path #> [1] \"/tmp/Rtmp1rTBAJ/pins-17745c9fa396/CITATION/20241007T174943Z-f5b9d/CITATION\" readLines(path)[1:5] #> [1] \"bibentry(\\\"Manual\\\",\"                                                          #> [2] \"         title = \\\"R: A Language and Environment for Statistical Computing\\\",\" #> [3] \"         author = person(\\\"R Core Team\\\"),\"                                    #> [4] \"         organization = \\\"R Foundation for Statistical Computing\\\",\"           #> [5] \"         address      = \\\"Vienna, Austria\\\",\""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for pins (legacy API) — pin_find","text":"","code":"pin_find(   text = NULL,   board = NULL,   name = NULL,   extended = FALSE,   metadata = FALSE,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/pin_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for pins (legacy API) — pin_find","text":"text text find pin description name. board board name used find pin. name exact name pin match searching. extended additional board-specific columns shown? metadata Include pin metadata results? ... Additional parameters.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_find.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for pins (legacy API) — pin_find","text":"Search pins legacy boards.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for pins (legacy API) — pin_find","text":"","code":"pin_find(\"cars\") #>           name #> mtcars  mtcars #> mtcars1 mtcars #> 2       mtcars #>                                                                                                                                                                                   description #> mtcars                                                                                                                                                                                        #> mtcars1                                                                                                                                                                                       #> 2       The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). #>          type      board #> mtcars  table      local #> mtcars1 table    myboard #> 2       table txtexample # -> board <- board_local() board %>% pin_search(\"cars\") #> # A tibble: 1 × 6 #>   name   type  title              created             file_size meta       #>   <chr>  <chr> <chr>              <dttm>              <fs::byt> <list>     #> 1 mtcars rds   mtcars: a pinned … 2024-10-07 17:49:40     1.19K <pins_met>"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a pin (legacy API) — pin_get","text":"","code":"pin_get(   name,   board = NULL,   cache = TRUE,   extract = NULL,   version = NULL,   files = FALSE,   signature = NULL,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/pin_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a pin (legacy API) — pin_get","text":"name name pin. board board pin retrieved . cache pin cache used? Defaults TRUE. extract compressed files extracted? board defines default behavior. version version dataset retrieve, defaults latest one. files file names returned? signature Optional signature validate pin, use pin_info() compute signature. ... Additional parameters.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a pin (legacy API) — pin_get","text":"Retrieves pin name local given board. pin_get() retrieves pin name , default, local board. can use board parameter specify board retrieve pin . board specified, use pin_find() find pin across boards retrieve one matches name.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a pin (legacy API) — pin_get","text":"","code":"# define temporary board board <- legacy_temp() pin(mtcars, board = board)  # retrieve the mtcars pin pin_get(\"mtcars\", board = board) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve pin metadata (legacy API) — pin_info","text":"","code":"pin_info(   name,   board = NULL,   extended = TRUE,   metadata = TRUE,   signature = FALSE,   ... )"},{"path":"https://pins.rstudio.com/dev/reference/pin_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve pin metadata (legacy API) — pin_info","text":"name exact name pin match searching. board board name used find pin. extended additional board-specific information shown? metadata additional pin-specific information shown? signature signature identify pin shown? ... Additional parameters.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve pin metadata (legacy API) — pin_info","text":"Retrieve metadata pins legacy boards.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve pin metadata (legacy API) — pin_info","text":"","code":"# old API board_register_local(cache = tempfile()) pin(mtcars) pin_info(\"mtcars\", \"local\") #> Warning: `pin_info()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_meta()` instead. #> # Source: local<mtcars> [table] #> # Properties: #> #   rows: 32 #> #   cols: 11 #> #   columns: #> #     mpg: numeric #> #     cyl: numeric #> #     disp: numeric #> #     hp: numeric #> #     drat: numeric #> #     wt: numeric #> #     qsec: numeric #> #     vs: numeric #> #     am: numeric #> #     gear: numeric #> #     carb: numeric  # new API board <- board_temp() board %>% pin_write(mtcars) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> Creating new version '20241007T174943Z-b9134' #> Writing to pin 'mtcars' board %>% pin_meta(\"mtcars\") #> List of 13 #>  $ file       : chr \"mtcars.rds\" #>  $ file_size  : 'fs_bytes' int 1.19K #>  $ pin_hash   : chr \"b91346fd7a21419e\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"mtcars: a pinned 32 x 11 data frame\" #>  $ description: NULL #>  $ tags       : NULL #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:49:43\" #>  $ api_version: int 1 #>  $ user       : list() #>  $ name       : chr \"mtcars\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/Rtmp1rTBAJ/pins-17745bdc70b/mtcars/20241007T174943Z-b9134\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T174943Z-b9134\""},{"path":"https://pins.rstudio.com/dev/reference/pin_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List all pins — pin_list","title":"List all pins — pin_list","text":"List names pins board. low-level function; use pin_search() get data pin convenient form.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all pins — pin_list","text":"","code":"pin_list(board, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all pins — pin_list","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. ... arguments passed methods","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all pins — pin_list","text":"character vector","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all pins — pin_list","text":"","code":"board <- board_temp()  board %>% pin_write(1:5, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174944Z-87646' #> Writing to pin 'x' board %>% pin_write(letters, \"y\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174944Z-facd1' #> Writing to pin 'y' board %>% pin_write(runif(20), \"z\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174944Z-7baf6' #> Writing to pin 'z'  board %>% pin_list() #> [1] \"x\" \"y\" \"z\""},{"path":"https://pins.rstudio.com/dev/reference/pin_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Pin Logging — pin_log","title":"Pin Logging — pin_log","text":"Log message diagnosing pins package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pin Logging — pin_log","text":"","code":"pin_log(...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pin Logging — pin_log","text":"... Entries logged.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metadata for a pin — pin_meta","title":"Retrieve metadata for a pin — pin_meta","text":"Pin metadata comes three sources: Standard metadata added pin_upload()/pin_write(). includes: $name - pin's name. $file - names files stored pin. $file_size - size file. $pin_hash - hash pin contents. $type - type pin: \"rds\", \"csv\", etc $title - pin title $description - pin description $tags - pin tags $urls - URLs info pin $created - date (version pin) created $api_version - API version used pin Metadata supplied user, stored $user. untouched supplied pin_write()/pin_upload() except converted YAML. Local metadata generated caching pin, stored $local. includes information like version pin, path local cache.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metadata for a pin — pin_meta","text":"","code":"pin_meta(board, name, version = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metadata for a pin — pin_meta","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve metadata for a pin — pin_meta","text":"list.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve metadata for a pin — pin_meta","text":"","code":"b <- board_temp() b %>% pin_write(head(mtcars), \"mtcars\", metadata = list(\"Hadley\" = TRUE)) #> Guessing `type = 'rds'` #> Creating new version '20241007T174944Z-f79b9' #> Writing to pin 'mtcars'  # Get the pin b %>% pin_read(\"mtcars\") #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 # Get its metadata b %>% pin_meta(\"mtcars\") #> List of 13 #>  $ file       : chr \"mtcars.rds\" #>  $ file_size  : 'fs_bytes' int 425 #>  $ pin_hash   : chr \"f79b99ba586971da\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"mtcars: a pinned 6 x 11 data frame\" #>  $ description: NULL #>  $ tags       : NULL #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:49:44\" #>  $ api_version: int 1 #>  $ user       :List of 1 #>   ..$ Hadley: logi TRUE #>  $ name       : chr \"mtcars\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/Rtmp1rTBAJ/pins-17743fd4c21/mtcars/20241007T174944Z-f79b9\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T174944Z-f79b9\" # Get path to underlying data b %>% pin_download(\"mtcars\") #> [1] \"/tmp/Rtmp1rTBAJ/pins-17743fd4c21/mtcars/20241007T174944Z-f79b9/mtcars.rds\"  # Use tags instead b %>% pin_write(tail(mtcars), \"mtcars\", tags = c(\"fuel-efficiency\", \"automotive\")) #> Guessing `type = 'rds'` #> Replacing version '20241007T174944Z-f79b9' with '20241007T174944Z-81f70' #> Writing to pin 'mtcars' b %>% pin_meta(\"mtcars\") #> List of 13 #>  $ file       : chr \"mtcars.rds\" #>  $ file_size  : 'fs_bytes' int 465 #>  $ pin_hash   : chr \"81f700c54fbb48ff\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"mtcars: a pinned 6 x 11 data frame\" #>  $ description: NULL #>  $ tags       : chr [1:2] \"fuel-efficiency\" \"automotive\" #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:49:44\" #>  $ api_version: int 1 #>  $ user       : list() #>  $ name       : chr \"mtcars\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/Rtmp1rTBAJ/pins-17743fd4c21/mtcars/20241007T174944Z-81f70\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T174944Z-81f70\""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive Pin (legacy API) — pin_reactive","text":"","code":"pin_reactive(name, board, interval = 5000, session = NULL, extract = NULL)"},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive Pin (legacy API) — pin_reactive","text":"name name pin. board board pin retrieved . interval Approximate number milliseconds wait retrieve updated pin. can numeric value, function returns numeric value. session user session associate file reader , NULL none. non-null, reader automatically stop session ends. extract compressed files extracted? board defines deefault behavior.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactive Pin (legacy API) — pin_reactive","text":"Creates pin reacts changes given board polling pin_get(), useful used shiny package.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a pin in a reactive expression — pin_reactive_read","title":"Wrap a pin in a reactive expression — pin_reactive_read","text":"pin_reactive_read() pin_reactive_download() wrap results pin_read() pin_download() Shiny reactive. allows use pinned data within app, results automatically recompute pin modified.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a pin in a reactive expression — pin_reactive_read","text":"","code":"pin_reactive_read(board, name, interval = 5000)  pin_reactive_download(board, name, interval = 5000)"},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a pin in a reactive expression — pin_reactive_read","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. interval Approximate number milliseconds wait re-downloading pin metadata check anything changed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_reactive_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a pin in a reactive expression — pin_reactive_read","text":"","code":"if (FALSE) {   library(shiny)   ui <- fluidPage(     tableOutput(\"table\")   )    server <- function(input, output, session) {     board <- board_local()     data <- pin_reactive_read(board, \"shiny\", interval = 1000)     output$table <- renderTable(data())   }   shinyApp(ui, server) }"},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write objects to and from a board — pin_read","title":"Read and write objects to and from a board — pin_read","text":"Use pin_write() pin object board, pin_read() retrieve .","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write objects to and from a board — pin_read","text":"","code":"pin_read(board, name, version = NULL, hash = NULL, ...)  pin_write(   board,   x,   name = NULL,   ...,   type = NULL,   title = NULL,   description = NULL,   metadata = NULL,   versioned = NULL,   tags = NULL,   urls = NULL,   force_identical_write = FALSE )"},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write objects to and from a board — pin_read","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. hash Specify hash verify get exactly dataset expect. can find hash existing pin looking pin_hash pin_meta(). ... Additional arguments passed methods specific board. x object (typically data frame) pin. type File type used save x disk. Must one \"csv\", \"json\", \"rds\", \"parquet\", \"arrow\", \"qs\". supplied, use JSON bare lists RDS everything else. aware CSV JSON plain text formats, RDS, Parquet, Arrow, qs binary formats. title title pin; important shared boards others can understand pin contains. omitted, brief description contents automatically generated. description detailed description pin contents. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. versioned pin versioned? default, NULL, use default board tags character vector tags pin; important discoverability shared boards. urls character vector URLs info pin, link wiki documentation. force_identical_write Store pin even pin contents identical last version (compared using hash). pin contents compared, pin metadata. Defaults FALSE.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write objects to and from a board — pin_read","text":"pin_read() returns R object read pin; pin_write() returns fully qualified name new pin, invisibly.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write objects to and from a board — pin_read","text":"pin_write() takes care details serialising R object disk, controlled type argument. See pin_download()/pin_upload() want perform serialisation work just files.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write objects to and from a board — pin_read","text":"","code":"b <- board_temp(versioned = TRUE)  b %>% pin_write(1:10, \"x\", description = \"10 numbers\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174945Z-76a69' #> Writing to pin 'x' b #> Pin board <pins_board_folder> #> Path: '/tmp/Rtmp1rTBAJ/pins-1774c146a43' #> Cache size: 0  b %>% pin_meta(\"x\") #> List of 13 #>  $ file       : chr \"x.rds\" #>  $ file_size  : 'fs_bytes' int 61 #>  $ pin_hash   : chr \"76a6946bd82fc9ec\" #>  $ type       : chr \"rds\" #>  $ title      : chr \"x: a pinned integer vector\" #>  $ description: chr \"10 numbers\" #>  $ tags       : NULL #>  $ urls       : NULL #>  $ created    : POSIXct[1:1], format: \"2024-10-07 17:49:45\" #>  $ api_version: int 1 #>  $ user       : list() #>  $ name       : chr \"x\" #>  $ local      :List of 3 #>   ..$ dir    : 'fs_path' chr \"/tmp/Rtmp1rTBAJ/pins-1774c146a43/x/20241007T174945Z-76a69\" #>   ..$ url    : NULL #>   ..$ version: chr \"20241007T174945Z-76a69\" b %>% pin_read(\"x\") #>  [1]  1  2  3  4  5  6  7  8  9 10  # Add a new version b %>% pin_write(2:11, \"x\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174945Z-972c2' #> Writing to pin 'x' b %>% pin_read(\"x\") #>  [1]  2  3  4  5  6  7  8  9 10 11  # Retrieve an older version b %>% pin_versions(\"x\") #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20241007T174945Z-76a69 2024-10-07 17:49:45 76a69 #> 2 20241007T174945Z-972c2 2024-10-07 17:49:45 972c2 b %>% pin_read(\"x\", version = .Last.value$version[[1]]) #>  [1]  2  3  4  5  6  7  8  9 10 11 # (Normally you'd specify the version with a string, but since the # version includes the date-time I can't do that in an example)"},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pin_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a pin (legacy API) — pin_remove","text":"","code":"pin_remove(name, board = NULL)"},{"path":"https://pins.rstudio.com/dev/reference/pin_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a pin (legacy API) — pin_remove","text":"name name pin. board board pin removed.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_remove.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete a pin (legacy API) — pin_remove","text":"Deletes pins legacy board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a pin (legacy API) — pin_remove","text":"","code":"# old API board_register_local(cache = tempfile()) pin(mtcars) pin_remove(\"mtcars\") #> Warning: `pin_remove()` was deprecated in pins 1.4.0. #> ℹ Please use `pin_delete()` instead.  # new API board <- board_local() board %>% pin_write(mtcars) #> Using `name = 'mtcars'` #> Guessing `type = 'rds'` #> ! The hash of pin \"mtcars\" has not changed. #> • Your pin will not be stored. board %>% pin_delete(\"mtcars\")"},{"path":"https://pins.rstudio.com/dev/reference/pin_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for pins — pin_search","title":"Search for pins — pin_search","text":"underlying search method depends board, search text pin name title.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for pins — pin_search","text":"","code":"pin_search(board, search = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for pins — pin_search","text":"board pin board, created board_folder(), board_connect(), board_url() another board_ function. search string search pin name title. Use NULL return pins. ... Additional arguments passed methods.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for pins — pin_search","text":"data frame summarises metadata pin. Key attributes (name, type, description, created, file_size) pulled columns; everything else can found meta list-column.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for pins — pin_search","text":"","code":"board <- board_temp()  board %>% pin_write(1:5, \"x\", title = \"Some numbers\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174946Z-87646' #> Writing to pin 'x' board %>% pin_write(letters[c(1, 5, 10, 15, 21)], \"y\", title = \"My favourite letters\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174946Z-33c44' #> Writing to pin 'y' board %>% pin_write(runif(20), \"z\", title = \"Random numbers\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174946Z-0ce90' #> Writing to pin 'z'  board %>% pin_search() #> # A tibble: 3 × 6 #>   name  type  title               created             file_size meta       #>   <chr> <chr> <chr>               <dttm>              <fs::byt> <list>     #> 1 x     rds   Some numbers        2024-10-07 17:49:46        50 <pins_met> #> 2 y     rds   My favourite lette… 2024-10-07 17:49:46        58 <pins_met> #> 3 z     rds   Random numbers      2024-10-07 17:49:46       166 <pins_met> board %>% pin_search(\"number\") #> # A tibble: 2 × 6 #>   name  type  title          created               file_size meta       #>   <chr> <chr> <chr>          <dttm>              <fs::bytes> <list>     #> 1 x     rds   Some numbers   2024-10-07 17:49:46          50 <pins_met> #> 2 z     rds   Random numbers 2024-10-07 17:49:46         166 <pins_met> board %>% pin_search(\"letters\") #> # A tibble: 1 × 6 #>   name  type  title               created             file_size meta       #>   <chr> <chr> <chr>               <dttm>              <fs::byt> <list>     #> 1 y     rds   My favourite lette… 2024-10-07 17:49:46        58 <pins_met>"},{"path":"https://pins.rstudio.com/dev/reference/pin_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"List, delete, and prune pin versions — pin_versions","title":"List, delete, and prune pin versions — pin_versions","text":"pin_versions() lists available versions pin. pin_versions_prune() deletes old versions. pin_version_delete() deletes single version.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List, delete, and prune pin versions — pin_versions","text":"","code":"pin_versions(board, name, ...)  pin_version_delete(board, name, version, ...)  pin_versions_prune(board, name, n = NULL, days = NULL, ...)"},{"path":"https://pins.rstudio.com/dev/reference/pin_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List, delete, and prune pin versions — pin_versions","text":"board, name pair board pin name. modern boards, use board %>% pin_versions(name). backward compatibility legacy API, can also use pin_versions(name) pin_version(name, board). ... Additional arguments passed methods specific board. version Version identifier. n, days Pick one n days choose many versions keep. n = 3 keep last three versions, days = 14 keep versions created 14 days. Regardless values set, pin_versions_prune() never delete recent version.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List, delete, and prune pin versions — pin_versions","text":"data frame least version column. boards may provided additional data.","code":""},{"path":"https://pins.rstudio.com/dev/reference/pin_versions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List, delete, and prune pin versions — pin_versions","text":"","code":"board <- board_temp(versioned = TRUE)  board %>% pin_write(data.frame(x = 1:5), name = \"df\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174946Z-daf2c' #> Writing to pin 'df' board %>% pin_write(data.frame(x = 2:6), name = \"df\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174946Z-61f41' #> Writing to pin 'df' board %>% pin_write(data.frame(x = 3:7), name = \"df\") #> Guessing `type = 'rds'` #> Creating new version '20241007T174947Z-8c357' #> Writing to pin 'df'  # pin_read() returns the latest version by default board %>% pin_read(\"df\") #>   x #> 1 3 #> 2 4 #> 3 5 #> 4 6 #> 5 7  # but you can return earlier versions if needed board %>% pin_versions(\"df\") #> # A tibble: 3 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20241007T174946Z-61f41 2024-10-07 17:49:46 61f41 #> 2 20241007T174946Z-daf2c 2024-10-07 17:49:46 daf2c #> 3 20241007T174947Z-8c357 2024-10-07 17:49:47 8c357  ver <- pin_versions(board, \"df\")$version[[1]] board %>% pin_read(\"df\", version = ver) #>   x #> 1 2 #> 2 3 #> 3 4 #> 4 5 #> 5 6  # delete all versions created more than 30 days ago board %>% pin_versions_prune(\"df\", days = 30) #> No old versions to delete"},{"path":"https://pins.rstudio.com/dev/reference/pins-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pins: Pin, Discover, and Share Resources — pins-package","title":"pins: Pin, Discover, and Share Resources — pins-package","text":"Publish data sets, models, R objects, making easy share across projects colleagues. can pin objects variety \"boards\", including local folders (share networked drive 'DropBox'), 'Posit Connect', 'AWS S3', .","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/reference/pins-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pins: Pin, Discover, and Share Resources — pins-package","text":"Maintainer: Julia Silge julia.silge@posit.co (ORCID) Authors: Hadley Wickham hadley@posit.co (ORCID) Javier Luraschi jluraschi@gmail.com contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://pins.rstudio.com/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics required_pkgs magrittr %>%","code":""},{"path":"https://pins.rstudio.com/dev/reference/required_pkgs.pins_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine required packages for a pins board — required_pkgs.pins_board_azure","title":"Determine required packages for a pins board — required_pkgs.pins_board_azure","text":"Determine required packages pins board","code":""},{"path":"https://pins.rstudio.com/dev/reference/required_pkgs.pins_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine required packages for a pins board — required_pkgs.pins_board_azure","text":"","code":"# S3 method for class 'pins_board_azure' required_pkgs(x, ...)  # S3 method for class 'pins_board_connect' required_pkgs(x, ...)  # S3 method for class 'pins_board_databricks' required_pkgs(x, ...)  # S3 method for class 'pins_board_gcs' required_pkgs(x, ...)  # S3 method for class 'pins_board_gdrive' required_pkgs(x, ...)  # S3 method for class 'pins_board_ms365' required_pkgs(x, ...)  # S3 method for class 'pins_board_s3' required_pkgs(x, ...)  # S3 method for class 'pins_board' required_pkgs(x, ...)"},{"path":"https://pins.rstudio.com/dev/reference/required_pkgs.pins_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine required packages for a pins board — required_pkgs.pins_board_azure","text":"x pin board ... used.","code":""},{"path":"https://pins.rstudio.com/dev/reference/required_pkgs.pins_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine required packages for a pins board — required_pkgs.pins_board_azure","text":"character vector package names required use board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/required_pkgs.pins_board.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine required packages for a pins board — required_pkgs.pins_board_azure","text":"","code":"required_pkgs(board_temp()) #> character(0)"},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Write board manifest file to board's root directory — write_board_manifest","title":"Write board manifest file to board's root directory — write_board_manifest","text":"board manifest file records pins, along versions, stored board. can useful board built using, example, board_folder() board_s3(), served website, others can consume using board_url(). manifest file versioned like pin , function overwrite existing _pins.yaml file board. responsibility user keep manifest date. examples provided vignette(\"using-board-url\").","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write board manifest file to board's root directory — write_board_manifest","text":"","code":"write_board_manifest(board, ...)"},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write board manifest file to board's root directory — write_board_manifest","text":"board pin board read-. ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write board manifest file to board's root directory — write_board_manifest","text":"board, invisibly","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write board manifest file to board's root directory — write_board_manifest","text":"function supported read-boards. called side-effect writing manifest file, _pins.yaml, root directory  board. (work unlikely event attempt create pin called \"_pins.yaml\".) behavior legacy API (example, pin_find()) unspecified written board manifest file board's root directory. recommend use write_board_manifest() modern boards.","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write board manifest file to board's root directory — write_board_manifest","text":"","code":"board <- board_temp() pin_write(board, mtcars, \"mtcars-csv\", type = \"csv\") #> Creating new version '20241007T174948Z-48c73' #> Writing to pin 'mtcars-csv' pin_write(board, mtcars, \"mtcars-json\", type = \"json\") #> Creating new version '20241007T174948Z-c2702' #> Writing to pin 'mtcars-json'  write_board_manifest(board) #> Manifest file written to root folder of board, as `_pins.yaml`  # see the manifest's format: fs::path(board$path, \"_pins.yaml\") %>% readLines() %>% cat(sep = \"\\n\") #> mtcars-csv: #> - mtcars-csv/20241007T174948Z-48c73/ #> mtcars-json: #> - mtcars-json/20241007T174948Z-c2702/  # if you write another pin, the manifest file is out of date: pin_write(board, 1:10, \"nice-numbers\", type = \"json\") #> Creating new version '20241007T174948Z-c3943' #> Writing to pin 'nice-numbers'  # you decide when to update the manifest: write_board_manifest(board) #> Manifest file written to root folder of board, as `_pins.yaml`"},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a manifest YAML file for a board — write_board_manifest_yaml","title":"Write a manifest YAML file for a board — write_board_manifest_yaml","text":"low-level function powers write_board_manifest(). needed primarily folks developing new board types, generally called directly.","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a manifest YAML file for a board — write_board_manifest_yaml","text":"","code":"write_board_manifest_yaml(board, manifest, ...)"},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a manifest YAML file for a board — write_board_manifest_yaml","text":"board pin board read-. manifest Contents written manifest file, list. ... Additional arguments passed methods specific board.","code":""},{"path":"https://pins.rstudio.com/dev/reference/write_board_manifest_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a manifest YAML file for a board — write_board_manifest_yaml","text":"write_board_manifest_yaml() called side-effect writing manifest YAML file.","code":""},{"path":[]},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-140","dir":"Changelog","previous_headings":"","what":"pins 1.4.0","title":"pins 1.4.0","text":"CRAN release: 2024-10-07","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"lifecycle-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Lifecycle changes","title":"pins 1.4.0","text":"Changed function signature pin_upload() consistent pin_write() .e. arguments like tags must passed name position (#809). Started gradual deprecation process legacy pins functions pin() (#844).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"other-improvements-1-4-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"pins 1.4.0","text":"Added example Python code pin previews Posit Connect (#806). Fixed bug pins name different owners Posit Connect identified (#808). Fixed bug handling folders duplicate names Google Drive (#819, @UchidaMizuki). Fixed previously deleted pin versions detected (#838, @MichalLauer). Added new board Databricks Volumes board_databricks() (#839, @edgararuiz). Switched writing type = \"parquet\" use nanoparquet package (#843).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-130","dir":"Changelog","previous_headings":"","what":"pins 1.3.0","title":"pins 1.3.0","text":"CRAN release: 2023-11-09","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"breaking-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"pins 1.3.0","text":"Changed function signature pin_write() arguments like type title must passed name position (#792).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"other-improvements-1-3-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"pins 1.3.0","text":"Removed content user caches Connect altogether. Now, look usernames content Connect server every time (#793). Added new urls item metadata pin (#795).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-122","dir":"Changelog","previous_headings":"","what":"pins 1.2.2","title":"pins 1.2.2","text":"CRAN release: 2023-09-09 Fixed dots checked pin_write() make user-facing messages clear (#770). Improved documentation Connect caches (#771) deleting pin versions (#773). Added board_deparse board_url() (#774). Fixed board_gdrive() handles dribble objects (#780, @gorkang #782).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-121","dir":"Changelog","previous_headings":"","what":"pins 1.2.1","title":"pins 1.2.1","text":"CRAN release: 2023-08-16 New environment variable PINS_CACHE_DIR controls location default cache path (#748). Added new board Google Drive board_gdrive() (#749). Updated test new arrow release (#764).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-120","dir":"Changelog","previous_headings":"","what":"pins 1.2.0","title":"pins 1.2.0","text":"CRAN release: 2023-05-18","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"pins 1.2.0","text":"pin_write() longer writes identical pin contents default, gains force_identical_write argument writing even pin contents identical last version (#735).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"other-improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"pins 1.2.0","text":"print method boards longer calls pin_list() internally (#718). board_s3() now uses pagination listing versioning (#719, @mzorko). Added type = \"parquet\" read write Parquet files (#729). Updated error messages type checking (#731) along testing strategy (#724). Added new check whether new version previous version, can happen writing pin versions quickly (#727). Added new headers argument board_url(), mostly authentication, well new board Connect vanity URLs board_connect_url() (#732). Fixed bug cache_prune() correctly find caches board_url() (#734).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-110","dir":"Changelog","previous_headings":"","what":"pins 1.1.0","title":"pins 1.1.0","text":"CRAN release: 2023-01-21","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"pins 1.1.0","text":"Change function board_rsconnect() board_connect(), following RStudio’s rebranding Posit (#689). Changed type = \"csv\" use R’s default value stringsAsFactors .e.  FALSE (#664). Functions viewing legacy API pins RStudio Viewer pane now deprecated (possible) removed (#679). functions accessing Kaggle resource pins longer supported. recommend use Kaggle CLI instead (#698).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"other-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"pins 1.1.0","text":"Added vignettes describing manage custom formats web-based boards (#631, #685, @ijlyttle). Added new board Google Cloud Storage board_gcs() (#695). Added new tags item metadata pin (#677). Improved error message pin_versions() (#657). Switched content user caches Connect use environments instead files disk. means caches longer persist sessions much less likely end broken state (#667). Added write_board_manifest() write manifest file _pins.yaml recording pins versions board’s root directory. function works boards read-(#661, based work @ijlyttle). Updated board_url() handle versions recorded via manifest file (#681, based work @ijlyttle). Updated code preview Posit Connect (#690).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-103","dir":"Changelog","previous_headings":"","what":"pins 1.0.3","title":"pins 1.0.3","text":"CRAN release: 2022-09-24 arrow package now suggested, rather imported (#644, @jonthegeek). Fixed Connect usernames handled messages, preview, etc (#643). Increased datetime precision second, pin_versions() related functions (#642, @tomsing1). Pass dots pin_write() s3_upload_file() s3_uploade_yaml() support S3 tagging, encryption options, etc pins (#648, #652, @fh-mthomson).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-102","dir":"Changelog","previous_headings":"","what":"pins 1.0.2","title":"pins 1.0.2","text":"CRAN release: 2022-08-23 board_rsconnect() now correctly finds created date pins (#623, @bjfletcher). pin_upload() now better handles path expansion (#585, @sellorm). pin_reactive_*() functions now use hash (rather created date) polling (#595, @thomaszwagerman).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-101","dir":"Changelog","previous_headings":"","what":"pins 1.0.1","title":"pins 1.0.1","text":"CRAN release: 2021-12-15 board_azure() now allows set path multiple boards can share container (#528, @hongooi73). board_deparse() likely generate runnable code used board_rsconnect() (#553). legazy_azure() works (#527). legacy_github() works (#549). pin_meta() now includes pin name (#544). board_register() works better called directly, due standardisation cache paths computation (#529). Drop add-ins since ’re tested documented (#525)","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-100","dir":"Changelog","previous_headings":"","what":"pins 1.0.0","title":"pins 1.0.0","text":"CRAN release: 2021-10-02 pins 1.0.0 includes new, explicit, API includes robust support versioning. modern API, create board object passed every pin_ function instead “registering” board later refereed string. leads code like : legacy API (pin(), pin_get(), board_register()) continue work, new features implemented new API, encourage switch modern API quickly possible. Learn vignette(\"pins-update\").","code":"board <- board_local() board %>% pin_write(mtcars, \"mtcars\") board %>% pin_read(\"mtcars\")"},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"modern-pin-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"Modern pin functions","title":"pins 1.0.0","text":"pin_read() pin_write() replace uses pin_get() pin(). pin_write() type argument allows choose serialise R objects disk, allowing manage tradeoffs speed, generality, language inter-op, metadata argument allows store arbitrary metadata (#430). pin_download() pin_upload() lower-level versions pin_read() pin_write() work file paths rather R objects. replace use pin() path eliminate type-instability pin_get(), can return either R object character vector paths. pin_browse() replaces board_browse(), takes specific pin, either original source internet, cached version local file system (#435). pin_delete() replaces pin_remove(), can delete multiple pins (#433). pin_list() lists pins board. pin_meta() replaces pin_info() retrieves pin metadata (#418). pin_search() replaces pin_find(). much limited previous version based assumptions true many boards. pin_reactive_read() pin_reactive_download() replace pin_reactive(). pin_exists() reports whether pin exists. pin_version_delete() allows delete single version. pin_versions_prune() (#459) allows easily prune old versions keeping either specified number versions, versions beneath certain age.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"modern-boards-1-0-0","dir":"Changelog","previous_headings":"","what":"Modern boards","title":"pins 1.0.0","text":"version includes following modern boards: board_azure() stores data Azure’s blob storage. built top AzureStor (#474). board_folder() generalised replacement legacy local board. board_folder() can store data directory, making possible share boards using shared network drives dropbox similar. using pins casually don’t want pick directory, board_local() variant board_folder() stores data system data directory. board_kaggle_dataset() board_kaggle_competition() allow download data Kaggle. data automatically cached ’s downloaded changes. board_ms365() allow pin data MS One Drive Sharpoint (#498, @hongooi73). board_rsconnect() shares data RStudio connect. board supports modern legacy APIs, colleagues can use mixture pins versions transition pins 1.0.0. Note compatibility one directional: can pin_read() pins created pin(), can’t pin_get() pins created pin_write(). board_s3() stores data Amazon’s S3 service. built top paws. board_url() lets create manual board vector URLs. useful pin_download() pin_read() cached, re-download data changed since last time used (#409). board replacement pin()’s ability work directly URLs legacy boards continue work legacy pins API; implement modern versions remaining legacy boards based user feedback.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"pins 1.0.0","text":"board objects now class beginning pins_board_ also inherit common superclass pins_board. Pins longer works connections pane. automatically registered code tended either dangerous (’s easy accidentally leak credentials) useless (relied variables connection pane doesn’t capture). Pinned data frames longer converted tibbles. “packages” board longer registered default; want use ’ll need register board_register(\"packages\"). radically simplified longer download packages, pin_find() now searches packages installed, rather stale snapshot data CRAN packages. CRAN files dataset removed package. board_browse() now works local boards. board_rsconnect() automatically connect current RSC pin board run inside RSC (assuming version 1.8.8 later) (#396). cache_browse(), cache_info(), cache_prune() provide basic tooling around local pins cache maintained pins (#438). pin_fetch() removed option(pins.invisible) now defunct ignored. can longer switch versioned pin unversioned pin without first deleting pin (#410).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-045","dir":"Changelog","previous_headings":"","what":"pins 0.4.5","title":"pins 0.4.5","text":"CRAN release: 2021-01-05","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-0-4-5","dir":"Changelog","previous_headings":"","what":"Pins","title":"pins 0.4.5","text":"Support downloading remote files service returns incompatible data.txt file (#310). Support pins 100MB Windows systems (#313). Avoid Windows crashing pin() locales (#127).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"boards-0-4-5","dir":"Changelog","previous_headings":"","what":"Boards","title":"pins 0.4.5","text":"Silenced ‘encoding supplied’ warning (#330).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"local-0-4-5","dir":"Changelog","previous_headings":"","what":"Local","title":"pins 0.4.5","text":"pin_find() longer searches text undocumented regular expression syntax (#270).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"s3-0-4-5","dir":"Changelog","previous_headings":"","what":"S3","title":"pins 0.4.5","text":"Default using HTTPS S3 boards (#304). Support AWS V4 signatures registering S3 boards region parameter (#304)","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"cloud-0-4-5","dir":"Changelog","previous_headings":"","what":"Cloud","title":"pins 0.4.5","text":"Support path register board subpath Azure, DigitalOcean, Google Cloud S3 boards (#200). Avoid creating pins named unsupported characters Azure, DigitalOcean, Google Cloud S3 boards (#193).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"github-0-4-5","dir":"Changelog","previous_headings":"","what":"GitHub","title":"pins 0.4.5","text":"Properly store relative paths path parameter specified GitHub boards (#199). Add support repos ‘main’ branch default (#336). Add support large file private repo releases (#292). board registered versions = FALSE, GitHub tags also delete large files present (#285).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-4-5","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.4.5","text":"Invalid ‘account’ ‘server’ parameters show proper errors (#296). Increase total entries retrieved pin_find(), configurable pins.search.count (#296). Fix regression introduced pins 0.4.2 (#253) preventing users collaborating existing pins access (#302). Avoid deleting pin upload fails avoid deleting versions (#306). Support re-creating pins pins previously properly updated (#308). Adjust pin preview display 1K rows instead 10K (#315). Avoid changing columns names data frame preview (#190). Improve error message token authentication fails (#327).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-044","dir":"Changelog","previous_headings":"","what":"pins 0.4.4","title":"pins 0.4.4","text":"CRAN release: 2020-10-30","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-0-4-4","dir":"Changelog","previous_headings":"","what":"Pins","title":"pins 0.4.4","text":"files bigger 100MB pin() creates symlinks speed uploads, can configured using pins.link.size option (#273). using pin(zip = TRUE) zip longer contains local patahs (#277).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"google-cloud-0-4-4","dir":"Changelog","previous_headings":"","what":"Google Cloud","title":"pins 0.4.4","text":"Disable caching data.txt support creating multiple pins (#275).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-0-4-4","dir":"Changelog","previous_headings":"","what":"RStudio","title":"pins 0.4.4","text":"Prevent connections pane hanging multiple pins updated (#280).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"website-0-4-4","dir":"Changelog","previous_headings":"","what":"Website","title":"pins 0.4.4","text":"Support pin_get(download = FALSE) avoid checking updates.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-4-4","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.4.4","text":"Support servers mismatched http vs https protocols. Make use RSCONNECT_TAR running report inside RStudio Connect (#293).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-043","dir":"Changelog","previous_headings":"","what":"pins 0.4.3","title":"pins 0.4.3","text":"CRAN release: 2020-07-10","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"boards-0-4-3","dir":"Changelog","previous_headings":"","what":"Boards","title":"pins 0.4.3","text":"Properly export board_pin_versions allow custom boards extending versions (#265).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"website-0-4-3","dir":"Changelog","previous_headings":"","what":"Website","title":"pins 0.4.3","text":"Fix regression creating pins using brand new cloud board (#268).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-042","dir":"Changelog","previous_headings":"","what":"pins 0.4.2","title":"pins 0.4.2","text":"CRAN release: 2020-07-05","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"website-0-4-2","dir":"Changelog","previous_headings":"","what":"Website","title":"pins 0.4.2","text":"Fix issue removing pins custom domain names cloud boards (#234). Fix warning using pin() storage locations custom domain name (#237). Fix issue datatxt refreshing deleted entries (#239).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-4-2","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.4.2","text":"Support versions = FALSE board_register() avoid using much space creating pins (#245). Prevent administrators overriding pins don’t , unless pin specified user/name (#253). Support connect servers redirect configured full server URL specified board_register() (#256). Throw error multiple accounts associated server (#261).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-041","dir":"Changelog","previous_headings":"","what":"pins 0.4.1","title":"pins 0.4.1","text":"CRAN release: 2020-05-28","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pin-0-4-1","dir":"Changelog","previous_headings":"","what":"Pin","title":"pins 0.4.1","text":"running production environments (usually set R_CONFIG_ACTIVE environment variable), avoid using shared caches. Fix pin() failing update cache server returns NULL etag. Support custom_metadata pin() allow saving custom fields data.txt file. Improve performannce pin() URLs containing large files already cached prerviously pin() (#225). Avoid showing upload download progress creating R Markdown documents non-interactive use cases (#227). pin(url) fails local cache exists, produce warning retrieve cached version (#231). Support pin(zip = TRUE) create zip file given path creating pin (#232).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-4-1","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.4.1","text":"Fix overriding pin corrupt metadata. Avoid using shared caches running inside RStudio Connect. Fixed ‘invalid uid’ warning creaating pin undner Linux servers (#263).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"kaggle-0-4-1","dir":"Changelog","previous_headings":"","what":"Kaggle","title":"pins 0.4.1","text":"Support find download competition datasets.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-040","dir":"Changelog","previous_headings":"","what":"pins 0.4.0","title":"pins 0.4.0","text":"CRAN release: 2020-04-07 Support versioning boards. Support DigitalOcean board.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pin-0-4-0","dir":"Changelog","previous_headings":"","what":"Pin","title":"pins 0.4.0","text":"Finding pins pin_find() sort results default (#201). Avoid incomplete final line found warning error wheen reading manifests. Support using pin() across multiple concurrent processes (#182). Support pin_get() download arbitrary files cloud boards like Azure, DigitalOcean, GitHub, Google Cloud, RStudio Connect, S3. Fix issue http HEAD requests tgimeout prevent pin downloading slow connections.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-0-4-0","dir":"Changelog","previous_headings":"","what":"RStudio","title":"pins 0.4.0","text":"Support access_type parameter RStudio Connect. pin() now refreshes connections pane. pin_remove() now refreshes connections pane.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-4-0","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.4.0","text":"Support code parameter pin() customize R code used UI retrieve pin (#77). Improve error message pin_get() duplicate names (#171). Fix board register error using URL ports (#195). Enable retrieving public pins without authentication (#83).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"github-0-4-0","dir":"Changelog","previous_headings":"","what":"GitHub","title":"pins 0.4.0","text":"Support versions = FALSE board_register() also delete release files pin removed (#91). Support versions = FALSE board_register() avoid creating versioned GitHub releases (#197). Support committing github files single commit (#197). Support custom GitHub hosts including GitHub Enterprise using host parameter board_register_github() (#163).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"websites-0-4-0","dir":"Changelog","previous_headings":"","what":"Websites","title":"pins 0.4.0","text":"Using pin() now searches data.txt files URLs URL contains file extension, behavior can turnned pins.search.datatxt option.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-032","dir":"Changelog","previous_headings":"","what":"pins 0.3.2","title":"pins 0.3.2","text":"CRAN release: 2020-02-06","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-0-3-2","dir":"Changelog","previous_headings":"","what":"Pins","title":"pins 0.3.2","text":"pin_info() adds support metadata parameter avoid retrieving pin contents.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"s3-0-3-2","dir":"Changelog","previous_headings":"","what":"S3","title":"pins 0.3.2","text":"Added support host parameter configure “s3.amazonaws.com” custom locations.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"github-0-3-2","dir":"Changelog","previous_headings":"","what":"GitHub","title":"pins 0.3.2","text":"Fix regression uploading large datasets release files.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-031","dir":"Changelog","previous_headings":"","what":"pins 0.3.1","title":"pins 0.3.1","text":"CRAN release: 2020-01-10","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-0-3-1","dir":"Changelog","previous_headings":"","what":"Pins","title":"pins 0.3.1","text":"pin_info() prints long character strings line. Fixed issue pin_remove() S3, Azure, GCloud, Google website boards (#138). Fixed issue pinning complex data frames nested lists (#142).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"azure-0-3-1","dir":"Changelog","previous_headings":"","what":"Azure","title":"pins 0.3.1","text":"Added missing key parameter board_register_azure().","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-0-3-1","dir":"Changelog","previous_headings":"","what":"RStudio","title":"pins 0.3.1","text":"Fixed connection suggested code caused pin_find() (#137). Fixed connection launcher Azure connections.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-3-1","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.3.1","text":"Fix issue uploading large pins causing .character(type) TRUE error. Fix issue affecting boards registered trailing slash (#151). Improve error messages pin fails created (#149). Added support CONNECT_API_KEY CONNECT_SERVER place RSCONNECT_API RSCONNECT_SERVER, still supported backwards-compatibility.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-030","dir":"Changelog","previous_headings":"","what":"pins 0.3.0","title":"pins 0.3.0","text":"CRAN release: 2019-11-26 Support Azure board. Support Google Cloud board. Support S3 board.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-0-3-0","dir":"Changelog","previous_headings":"","what":"Pins","title":"pins 0.3.0","text":"pin() extracts URLs end .gz zip, can disabled pin(\"<url>\", extract = FALSE). pin() longer prints pin, can revert behavior options(pins.invisible = FALSE) (#122). Show upload progress files larger 10mb. Avoid changing data.table using pin() get_pin(). Support pin_info() describe pin extended = TRUE pin_find() show extended information pin. Support extract parameter pin_get(), pin(), pin_reactive() override default file extraction behavior. Support extract gzip files R.utils package installed. Show download progress files larger 10mb. Support () force pin created without additional overhead exporting CSV enhancements (#73). Support creating automatic name using pin() multiple URL.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"boards-0-3-0","dir":"Changelog","previous_headings":"","what":"Boards","title":"pins 0.3.0","text":"Avoid “create dir” warning systems empty cache folder.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-0-3-0","dir":"Changelog","previous_headings":"","what":"RStudio","title":"pins 0.3.0","text":"Gracefully handle errors pin’s preview can’t created. Website boards now support browse menu item connection. Fix data frames previewing character columns special characters. Fix connection code board registered automatically.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-3-0","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.3.0","text":"Fix issue pin_find() show available pins. Fix issue RStudio Connections pane show pins. Store downloaded content user subfolder insited rsconnect cache. Removed pin_find() workaround beta rsconnect server searching causing timeout. Fix RStudio Connect servers /content/ used content URLs. Fix issue expanding pins columns RStudio pins similar names RStudio Connect boards. Fix issue removing pins similar names RStudio Connect boards.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"python-0-3-0","dir":"Changelog","previous_headings":"","what":"Python","title":"pins 0.3.0","text":"Support Python 3.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"websites-0-3-0","dir":"Changelog","previous_headings":"","what":"Websites","title":"pins 0.3.0","text":"name parameter board_register_datatxt() now optional. Fix pin_find() properly search desecription files.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"github-0-3-0","dir":"Changelog","previous_headings":"","what":"GitHub","title":"pins 0.3.0","text":"Various fixes GitHub boards using path parameter registering board (#121).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-020","dir":"Changelog","previous_headings":"","what":"pins 0.2.0","title":"pins 0.2.0","text":"CRAN release: 2019-10-01","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"rstudio-connect-0-2-0","dir":"Changelog","previous_headings":"","what":"RStudio Connect","title":"pins 0.2.0","text":"Support retrieving pins shared others RStudio Connect boards. Support RStudio Connect servers running subpath server. Add support RSCONNECT_SERVER environment variable ease configuration automated RStudio Connect reports. Fix intermittent failure retrieve pins RStudio Connect boards creating . Fix RStudio Connect boards retrieve pins match pin names (#45). Fix data frames nested data frames rsconnect boards (#36).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"github-0-2-0","dir":"Changelog","previous_headings":"","what":"GitHub","title":"pins 0.2.0","text":"board_register_github() now checks repo exist (#63). Adjusted max upload file 25mb avoid “server error” API, larger files 25mb uploaded release files. can configured using pins.github.release option, deefaults 25. Allow overriding GitHub pin pin partially failed created.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"boards-0-2-0","dir":"Changelog","previous_headings":"","what":"Boards","title":"pins 0.2.0","text":"Using board attempt automatically register, pin(iris, board = \"rsconnect\") work default configuration even board explicitly registered (#50). Registers “local” board default, longer need explicitly run board_register_local() (#56). Make use rappdirs package define default cache path, replaces ~/.pins. Use board_cache_path() retrieve default cache path.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"websites-0-2-0","dir":"Changelog","previous_headings":"","what":"Websites","title":"pins 0.2.0","text":"Fix data.txt boards created GitHub boards using large files.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-012","dir":"Changelog","previous_headings":"","what":"pins 0.1.2","title":"pins 0.1.2","text":"CRAN release: 2019-09-04 Support upload files larger 50mb GitHub boards release files.","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-011","dir":"Changelog","previous_headings":"","what":"pins 0.1.1","title":"pins 0.1.1","text":"CRAN release: 2019-08-30 Fix CRAN request explicitly opt-use local home path cache running board_register_local(). Fix error retrieving pins Kaggle boards (#31). Support large files GitHub board (#30).","code":""},{"path":"https://pins.rstudio.com/dev/news/index.html","id":"pins-010","dir":"Changelog","previous_headings":"","what":"pins 0.1.0","title":"pins 0.1.0","text":"CRAN release: 2019-08-28 Support local board. Support Kaggle board. Support packages board. Support RStudio Connect board. Support GitHub board. Support website board.","code":""}]
